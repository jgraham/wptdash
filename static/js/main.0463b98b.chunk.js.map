{"version":3,"sources":["utils.js","filter.js","form.js","App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","FilterError","Error","handlers","and","data","args","child","push","filterCompiler","operators","apply","or","not","contains","_len","arguments","_key","ctx","x","_len2","_key2","some","arg","Object","ctxValue","getValue","includes","keyParts","split","target","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","part","Map","input","console","error","op","hasOwnProperty","concat","Checkbox","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","checked","onCheckboxChange","state","inherits","createClass","react_default","createElement","name","type","onChange","Component","Select","_Component3","_getPrototypeOf2","_this3","selectItems","options","option","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","makeWptFyiUrl","path","params","url","URL","defaults","_ref3","_ref2","slicedToArray","searchParams","append","_arr","_loop","_i2","forEach","FetchError","resp","message","status","statusText","fetchJson","_callee17","_context17","fetch","sent","ok","json","abrupt","anyRe","workerRe","testToPath","test","pathname","match","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","set","_update","delete","makeError","id","App","_this2","onError","errors","onDismissError","idx","findIndex","splice","onFilterChange","filter","filterFunc","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","retry","redirect","indexName","artifactName","_callee2","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","runsUrl","aligned","asyncToGenerator","mark","_callee5","_context5","_this4","loadWptRunData","_callee7","_context7","_this5","loadGeckoMetadata","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","Promise","all","pathRe","makeRe","slice","notPaths","values","notPathRe","allMetadata","_arr2","_i3","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i4","filename","relPath","prevProps","prevState","filterGeckoMetadata","body","App_RunInfo","App_BugComponentSelector","App_Filter","App_TestPaths","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","App_ErrorArea","ErrorArea","onDismiss","_this6","_this7","errorLines","_loop2","_ref7","_ref8","App_ErrorLine","className","ErrorLine","_this8","_this$props$error","extraControls","onClick","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","_this9","form_Select","Filter","_this10","types","entries","none","untriaged","triaged","custom","onTypeChange","JSON","stringify","_this10$getType","getType","_this10$getType2","urlValue","_urlValue$split","_urlValue$split2","triageText","optionText","_ref9","_ref10","TestPaths","_this11","add","onUpdateClick","_this12","listItems","form_Checkbox","disabled","ResultsView","_this13","results","filteredResults","query","run_ids","topAndClause","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","browser","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","browser_name","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","orClause","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pattern","searchQuery","buildQuery","method","headers","Content-Type","_context11","_retry","_callee10","_context10","_this14","fetchResults","result","_geckoMetadata","getMetadata","dirParts","testName","dirPath","copyMeta","src","_arr4","_i5","_ref13","_ref12","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr5","_i6","_ref16","_ref15","_this15","_this16","children","testItems","App_TestItem","legacy_status","total","reduce","y","fetchIfPossible","log","updateFilteredResults","TreeRow","_this17","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this18","loaded","_this19","resultBySubtest","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref21","_ref18","browserResults","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","subtests","subtest","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","resultByBrowser","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","filteredResultBySubtest","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop3","_ref19","_ref20","_iterator11","rv","resultData","browsers","promises","_iterator14","_iteratorNormalCompletion14","_step14","summaryUrl","results_url","parts","promise","then","success","catch","e","resolved","_iterator15","_iteratorNormalCompletion15","_step15","_ref24","_ref23","processResultData","_this20","headerRow","subtestMetadata","resultRows","_ref25","_ref26","App_ResultRow","App_MetaSummary","MetaSummary","items","_this21","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this22","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr6","_i7","_ref29","_ref28","dir","dirData","expected_CRASH","cond","_arr7","_i8","_ref32","_ref31","testData","testKey","_arr8","_i9","_ref35","_ref34","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref38","_ref37","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref41","_ref40","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref44","_ref43","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref47","_ref46","condition","conditionStr","valueList","MaybeBugLink","_arr9","_i10","LsanListValue","frames","Tabs","_this23","handleClickTab","activeTab","_this24","tabItems","App_Tab","active","activeTabContent","Tab","_this25","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0463b98b.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    not: data => {\n        return operators.not(filterCompiler(data));\n    },\n\n    contains: (data) => {\n        return operators.contains(data);\n    },\n\n    has: data => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    contains: (arg) => {\n        let key = Object.keys(arg)[0];\n        let value = arg[key];\n        return (ctx) => {\n            let ctxValue = getValue(ctx, key);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(value);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(keys);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value\n        };\n    }\n\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.setState({value});\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                name={this.props.name}\n                onChange={this.handleChange}\n                value={this.props.value}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {filterCompiler} from './filter';\nimport {Checkbox, TextInput, Select} from './form';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n            filter: null,\n            filterFunc: null,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filter) => {\n        let filterFunc = filter ? filterCompiler(filter) : null;\n        this.setState({filter, filterFunc});\n      }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        this.setState({wptRuns: runs});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let metadata = await this.fetchData(`https://queue.taskcluster.net/v1/task/Ik2tnR1KQzi26GfvTQ2WHw/runs/0/artifacts/public/summary.json`,\n                                            async () => this.loadGeckoMetadata());\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            body = <p>Loading…</p>;\n        } else {\n            body = [<section id=\"selector\" key=\"selector\">\n                      <RunInfo runs={this.state.wptRuns}/>\n                      <BugComponentSelector onComponentChange={this.onComponentChange}\n                                            components={this.state.bugComponents}\n                                            value={this.state.currentBugComponent} />\n                      <Filter onChange={this.onFilterChange} />\n                      <TestPaths\n                        paths={paths}\n                        selectedPaths={this.state.selectedPaths}\n                        onChange={this.onPathsChange} />\n                    </section>,\n                    <section id=\"details\" key=\"details\">\n                      <Tabs>\n                        <ResultsView label=\"Firefox-only Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[\"safari\", \"chrome\"]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}\n                                     filter={this.state.filterFunc}>\n                          <h2>Firefox-only Failures</h2>\n                          <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                        </ResultsView>\n                        <ResultsView label=\"All Firefox Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}\n                                     filter={this.state.filterFunc}>\n                          <h2>All Firefox Failures</h2>\n                          <p>Tests that fail in Firefox</p>\n                        </ResultsView>\n                        <GeckoData label=\"Gecko Data\"\n                                   data={this.state.pathMetadata}\n                                   paths={Array.from(this.state.selectedPaths)}\n                                   onError={this.onError}>\n                          <h2>Gecko metadata</h2>\n                          <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                          <p>Note: this data is currently not kept up to date</p>\n                        </GeckoData>\n                      </Tabs>\n                    </section>];\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <Select\n                    onChange={this.handleChange}\n                    value={this.props.value}\n                    options={options}/>\n                </section>);\n    }\n}\n\nclass Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: {not: {has: \"_geckoMetadata.bug\"}}},\n                                    triaged: {name: \"Triaged\", filter: {has: \"_geckoMetadata.bug\"}},\n                                    custom: {name: \"Custom…\", filter: null}}));\n\n    constructor(props) {\n        super(props);\n        let [type, data] = this.getType();\n        this.state = {\n            type: type,\n            data: data\n        };\n        props.onChange(data);\n    }\n\n    getType() {\n        // TODO: Maybe this should be in the parent\n        let [type, data] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            [type, data] = urlValue.split(\":\", 1);\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n        }\n        if (type !== \"custom\") {\n            data = this.types.get(type).filter;\n        }\n        return [type, data];\n    }\n\n    onTypeChange = (type) => {\n        this.setState({type: type});\n        let data;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n            data = null;\n        } else if(type === \"custom\") {\n            let data = this.state.data;\n            urlParams.set(\"filter\", `custom:${JSON.stringify(data)}`);\n        } else {\n            urlParams.set(\"filter\", type);\n            data = this.types.get(type).filter;\n        }\n\n        this.props.onChange(data);\n    }\n\n    render() {\n        let triageText = `Triaged status is currently derived from a bug: annotation in\nthe gecko metadata on the test file (not on subtests). In the future this will change to\ninclude external annotations accessible to wpt.fyi`;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": \"UI for custom filters is not yet implemented\"\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return (<section>\n                  <label>Filter:</label>\n                  <Select options={options}\n                          value={this.state.type}\n                          onChange={this.onTypeChange}/>\n                  {optionText.hasOwnProperty(this.state.type) ?\n                   <p className=\"note\">{optionText[this.state.type]}</p> : null}\n                </section>);\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => result._geckoMetadata = this.getMetadata(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    render() {\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let results = this.state.filteredResults ? this.state.filteredResults : [];\n        let testItems = results.map(result => (<TestItem\n                                                 failsIn={this.props.failsIn}\n                                                 passesIn={this.props.passesIn}\n                                                 runs={this.props.runs}\n                                                 result={result}\n                                                 key={result.test}\n                                                 geckoMetadata={result.test._geckoMetadata || new Map()}\n                                                 onError={this.props.onError}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{results.length} top-level tests with\n                    &nbsp;{results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n        console.log(this.state.results);\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.props.failsIn === prevProps.failsIn &&\n            this.props.passesIn === prevProps.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}