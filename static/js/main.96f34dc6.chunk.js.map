{"version":3,"sources":["utils.js","form.js","metaeditor.js","urlparams.js","filter.js","filterselector.js","App.js","serviceWorker.js","index.js"],"names":["arraysEqual","a","b","Array","isArray","length","every","a_value","i","setsEqual","size","elem","has","iterMapSorted","map","cmp","keys","from","sort","key","get","enumerate","iter","count","item","Checkbox","Component","constructor","props","super","handleChange","event","this","setState","checked","target","onCheckboxChange","value","state","render","name","type","onChange","TextInput","defaultValue","list","Select","selectItems","options","option","SelectMultiple","selectedOptions","call","x","selected","multiple","MetadataEditor","changes","id","href","onSubmit","onCancel","MetadataPendingChanges","listItems","entries","test","change","push","url","subtest","onClick","urlParams","URL","window","location","params","searchParams","_update","history","replaceState","document","title","set","delete","append","FilterError","Error","handlers","and","data","args","child","filterCompiler","operators","or","not","in","ctx","some","lhs","rhs","arg","ctxValue","getValue","includes","undefined","keyParts","split","part","Map","input","Object","console","error","op","hasOwnProperty","ParseError","operatorTokens","Set","unaryOperators","precedenceGroups","operatorPrecedence","groupIdx","group","operatorAliases","defaultOperator","Node","to_object","obj","children","UnaryOperatorNode","operand","BinaryOperatorNode","ValueNode","slice","createOperatorNode","token","Parser","operands","top","parse","tokens","apply","pop","precedence","operator","transformDefaultOperator","parseExpr","expr","space","term","initialLength","m","match","skip","tokenize","Filter","types","none","filter","untriaged","queryTerms","link","triaged","custom","onTypeChange","afterTypeChange","onExprChange","ast","clearTimeout","timer","e","setTimeout","log","urlValue","parts","join","componentDidUpdate","prevProps","prevState","afterFilterUpdate","typeData","triageText","className","optionText","TASK_QUEUE_BASE","passStatuses","browsers","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","bugLinkRe","makeWptFyiUrl","path","staging","defaults","forEach","capitalize","str","toUpperCase","FetchError","resp","message","status","statusText","async","fetchJson","fetch","ok","json","anyRe","workerRe","testToPath","pathname","exec","makeError","err","App","onError","errors","concat","onDismissError","idx","findIndex","splice","onFilterChange","filterFunc","onRunChange","runSha","onMetadataPendingSubmit","isMatch","product","metadataPendingChanges","changedMeta","meta","prevMetadata","wptMetadata","results","result","newMeta","index","patchMetadata","onMetadataPendingCancel","onMetadataChange","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","bugComponents","wptRuns","geckoMetadata","pathGeckoMetadata","haveData","bugComponent","wptRun","body","JSON","stringify","hostname","response","method","mode","cache","credentials","headers","retry","redirect","indexName","artifactName","runId","loadTaskClusterData","taskId","fetchData","taskStatus","run","array","reversed","runs","artifactData","artifacts","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","urlPaths","aligned","runsUrl","loadWptRunData","full_revision_hash","metaUrl","metadata","loadWptMetadata","Promise","all","loadBugComponentData","loadGeckoMetadata","filterGeckoMetadata","makeRe","pathPrefixes","RegExp","pathRe","notPaths","values","notPathRe","allMetadata","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","basePath","found","filename","relPath","label","ErrorArea","onDismiss","errorLines","ErrorLine","extraControls","RunInfo","onInputChange","newSha","onEditClick","editable","onUpdateClick","runShas","browserRuns","revision","add","browser_name","sha","BrowserInfo","browser_version","os_name","BugComponentSelector","TestPaths","disabled","ResultsView","onBrowserChange","passesIn","failsIn","defaultBrowsers","comparison","getComparison","loading_state","filteredResults","rv","listValue","buildQuery","query","run_ids","topAndClause","browser","orClause","pattern","searchQuery","fetchResults","_wptMetadata","getWptMetadata","_geckoMetadata","getGeckoMetadata","metaEntry","dirParts","testName","dirPath","copyMeta","src","dirMeta","dirMetadata","_tests","testMetadata","_subtests","updateFilteredResults","testItems","legacy_status","total","reduce","y","fetchIfPossible","ResultsViewSummary","onSelectChange","newPassesIn","newFailsIn","joinList","items","passInOptions","failInOptions","text","TreeRow","handleClick","showDetails","rowTitle","rowExtra","TestItem","TestDetails","loaded","processResultData","resultBySubtest","browserResults","subtests","resultByBrowser","filteredResultBySubtest","resultData","promises","results_url","promise","then","success","catch","resolved","headerRow","subtestMetadata","resultRows","WptTestMetadata","newLinkValue","onAddLink","bugUrl","addLink","onRemoveLink","componentDidMount","filterBugLinks","bugLinks","controlElements","onRemove","fxMetadata","relevantResults","MetadataBugLink","GeckoMetaSummary","renderBug","metaProps","prop","InlineOrTreeMetadata","ResultRow","cells","ResultCell","GeckoData","groupData","unconditional","conditional","intermittent","lsan","crashes","dest","mapFn","destKey","dir","dirData","expected_CRASH","cond","testData","testKey","subtestData","subtestKey","byType","typeValues","desc","GeckoDataSection","GeckoMetadataLine","condition","conditionStr","valueList","MaybeBugLink","bugNumberRe","re","LsanListValue","frames","StatusListValue","statuses","prev","current","Tabs","handleClickTab","activeTab","tabItems","active","activeTabContent","Tab","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96f34dc6.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  onChange={this.handleChange}\n                  defaultValue={this.props.defaultValue}\n                  list={this.props.list}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class SelectMultiple extends Component {\n    handleChange = (event) => {\n        let selectedOptions = event.target.selectedOptions;\n        this.props.onChange([].map.call(selectedOptions, x => x.value));\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value} selected={option.selected}>\n                                                 {option.name}\n                                                 </option>);\n        return (<select\n                  size=\"3\"\n                  multiple\n                  onChange={this.handleChange}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class DataList extends Component {\n    render() {\n        let items = this.props.options.map(option => <option value={option} key={option}/>);\n        return (<datalist id={this.props.id}>\n                  {items}\n                </datalist>);\n    }\n}\n","import React, { Component } from 'react';\n\nexport class MetadataEditor extends Component {\n    render() {\n        if (!this.props.changes.size) {\n            return null;\n        }\n        let loginUrl = `https://staging.wpt.fyi/login`;\n        return (<section id=\"metadata\">\n                  <h3>Metadata Changes</h3>\n                  <p>Submitting MetaData requires first signing in to <a href={loginUrl} target=\"_blank\">staging.wpt.fyi</a></p>\n                  <MetadataPendingChanges\n                    changes={this.props.changes}\n                    onSubmit={this.props.onSubmit}\n                    onCancel={this.props.onCancel} />\n                </section>);\n    };\n}\n\n\nclass MetadataPendingChanges extends Component {\n    render() {\n        let listItems = [];\n        for (let [test, changes] of this.props.changes.entries()) {\n            for (let change of changes) {\n                listItems.push(<li key={change.test + change.url}>{test} | {change.subtest} | {change.change} | {change.url}</li>);\n            }\n        }\n        return (<div>\n                  <details>\n                  <summary>Pending Changes</summary>\n                    <ol>\n                      {listItems}\n                    </ol>\n                  </details>\n                  <div>\n                    <button onClick={this.props.onSubmit}>Sumbit Changes</button>\n                    <button onClick={this.props.onCancel}>Cancel</button>\n                  </div>\n                </div>);\n    }\n}\n","class UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nexport const urlParams = new UrlParams();\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    \"==\": (data)  => {\n        return operators[\"==\"](data);\n    },\n\n    not: ([data]) => {\n        return operators.not(filterCompiler(data));\n    },\n\n    in: (data) => {\n        return operators.in(data);\n    },\n\n    has: ([data]) => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    \"==\": ([lhs, rhs]) => {\n        return lhs === rhs;\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    in: ([lhs, rhs]) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, rhs);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(lhs);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(input);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        console.error(input);\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\nclass ParseError extends Error{};\n\nfunction* tokenize(input) {\n    let space = /\\s*/;\n    let term = /\\w(?:\\w|\\d|\\.|_|-|\\+|\\/)*|\\d+|==|!=|\\(|\\)|:|\".*?[^\\\\]\"|'.*?[^\\\\]'/;\n\n    let initialLength = input.length;\n\n    while (input.length) {\n        // Skip spaces\n        let m = input.match(space);\n        if (m[0].length) {\n            let skip = m[0].length;\n            input = input.slice(skip);\n            if (!input.length) {\n                break;\n            }\n        }\n\n        //Match the next token\n        m = input.match(term);\n        if (!m) {\n            throw new ParseError(`Invalid input at character ${initialLength - input.length}`);\n        }\n        let token = m[0];\n        yield token;\n        input = input.slice(token.length);\n    }\n}\n\nconst operatorTokens = new Set([\"==\", \"!=\", \"in\", \"and\", \"or\", \"!\", \"not\", \":\", \"has\"]);\nconst unaryOperators = new Set([\"!\", \"not\", \"has\"]);\n\nconst precedenceGroups = [[\":\"], [\"in\", \"==\", \"!=\", \"has\"], [\"not\", \"!\"], [\"and\"], [\"or\"]];\nconst operatorPrecedence = new Map();\n\nfor (let [groupIdx, group] of precedenceGroups.map((x, i) => [i, x])) {\n    for (let op of group) {\n        operatorPrecedence.set(op, precedenceGroups.length - groupIdx);\n    }\n}\n\nconst operatorAliases = new Map(Object.entries({\"!\": \"not\"}));\n\nconst defaultOperator = new Map(Object.entries({test: \"in\"}));\n\n\nclass Node {\n    constructor(name) {\n        this.name = name;\n    }\n\n    to_object() {\n        let obj = {};\n        obj[this.name] = this.children().map(x => x.to_object());\n        return obj;\n    }\n}\n\nclass UnaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || !unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.operand = null;\n    }\n\n    children() {\n        return [this.operand];\n    }\n}\n\nclass BinaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.lhs = null;\n        this.rhs = null;\n    }\n\n    children() {\n        return [this.lhs, this.rhs];\n    }\n}\n\nclass ValueNode extends Node {\n    constructor(name) {\n        if (name[0] === \"'\" || name[0] === '\"') {\n            name = name.slice(1, name.length - 1);\n        }\n        super(name);\n    }\n    to_object() {\n        return this.name;\n    }\n}\n\nfunction createOperatorNode(token) {\n    if (unaryOperators.has(token)) {\n        return new UnaryOperatorNode(token);\n    }\n    return new BinaryOperatorNode(token);\n}\n\nfunction transformDefaultOperator(operator) {\n    // The default operator creates a different kind of relation depending on the arguments\n    let op = \"==\";\n    if (defaultOperator.has(operator.lhs.name)) {\n        op = defaultOperator.get(operator.lhs.name);\n    }\n    operator.name = op;\n    if (op === \"in\") {\n        [operator.lhs, operator.rhs] = [operator.rhs, operator.lhs];\n    }\n    return operator;\n}\n\nclass Parser {\n    constructor() {\n        this.operators = [];\n        this.operands = [];\n    }\n\n    top() {\n        return this.operators.length ? this.operators[this.operators.length - 1] : null;\n    }\n\n    parse(tokens) {\n        for (let token of tokens) {\n            if (token === \"(\") {\n                this.operators.push(token);\n            } else if (token === \")\") {\n                while(this.top() !== null && this.top() !== \"(\") {\n                    this.apply();\n                }\n                if (!this.operators.length) {\n                    throw new ParseError(\"Mismatched parens\");\n                }\n                this.operators.pop();\n            } else if (operatorTokens.has(token)) {\n                while (this.top() !== null &&\n                       this.top() !== \")\" &&\n                       this.precedence(this.top().name) >= this.precedence(token)) {\n                    this.apply();\n                }\n                this.operators.push(createOperatorNode(token));\n            } else {\n                this.operands.push(new ValueNode(token));\n            }\n        }\n        while (this.operators.length) {\n            this.apply();\n        }\n        if (this.operands.length !== 1) {\n            throw new ParseError(\"Operands remaining at end of input\");\n        }\n        return this.operands[0];\n    }\n\n    precedence(token) {\n        return operatorPrecedence.get(token);\n    }\n\n    apply() {\n        let operator = this.operators.pop();\n        if (unaryOperators.has(operator.name)) {\n            let operand = this.operands.pop();\n            if (!operand) {\n                throw new Error();\n            }\n            operator.operand = operand;\n        } else {\n            let rhs = this.operands.pop();\n            let lhs = this.operands.pop();\n            if (!lhs || !rhs) {\n                throw new Error();\n            }\n            operator.lhs = lhs;\n            operator.rhs = rhs;\n            if (operator.name === \":\") {\n                operator = transformDefaultOperator(operator);\n            }\n        }\n        this.operands.push(operator);\n    }\n}\n\n\nexport function parseExpr(expr) {\n    let parser = new Parser();\n    return parser.parse(tokenize(expr)).to_object();\n}\n","import React, { Component } from 'react';\nimport {TextInput, Select} from './form';\nimport {urlParams} from './urlparams';\nimport {filterCompiler, parseExpr} from './filter';\n\nexport class Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: null,\n                                                queryTerms: [{not: {link: \"bugzilla.mozilla.org\"}}]},\n                                    triaged: {name: \"Triaged\", filter: null,\n                                              queryTerms: [{link: \"bugzilla.mozilla.org\"}]},\n                                    custom: {name: \"Custom…\", filter: null, queryTerms: []}}));\n\n    constructor(props) {\n        super(props);\n        let [type, expr] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            let parts = urlValue.split(\":\");\n            type = parts[0];\n            expr = parts.slice(1).join(\":\");\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n            expr = null;\n        }\n        if (type !== \"custom\") {\n            expr = this.types.get(type).filter;\n        }\n        this.state = {type, expr};\n        this.afterTypeChange(type);\n        if (expr) {\n            this.onExprChange(expr);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.type !== this.state.type ||\n            prevState.expr !== this.state.expr) {\n            this.afterFilterUpdate();\n        }\n    }\n\n    onTypeChange = (type) => {\n        if (!this.types.has(type)) {\n            return;\n        }\n        this.setState({type: type});\n        this.afterTypeChange(type);\n    }\n\n    afterTypeChange(type) {\n        let expr;\n        let queryTerms = [];\n        if (type === \"custom\") {\n            expr = this.state.expr;\n        } else {\n            let typeData = this.types.get(type);\n            expr = typeData.filter;\n            queryTerms = typeData.queryTerms || [];\n        }\n        let filter;\n        if (expr) {\n            filter = filterCompiler(parseExpr(expr));\n        }\n        this.props.onChange(filter, queryTerms);\n    }\n\n    onExprChange = (expr) => {\n        let ast;\n        clearTimeout(this.timer);\n        try {\n            ast = expr ? parseExpr(expr) : null;\n        } catch (e) {\n            this.timer = setTimeout(() => {\n                //TODO: Add UI errors for things that won't compile\n                console.log(e);\n            }, 1000);\n            return;\n        }\n        this.timer = setTimeout(() => {\n            let filter;\n            try {\n                filter = ast ? filterCompiler(ast) : null;\n            } catch(e) {\n                console.error(e);\n                return;\n            }\n            this.props.onChange(filter, []);\n            this.setState({expr});\n        }, 1000);\n    }\n\n    afterFilterUpdate() {\n        let type = this.state.type;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n        } else if(type === \"custom\") {\n            let expr = this.state.expr;\n            urlParams.set(\"filter\", `custom:${expr}`);\n        } else {\n            urlParams.set(\"filter\", type);\n        }\n    }\n\n    render() {\n        let triageText = <p className=\"note\">\n                           Triaged status is determined by a bugzilla link for the test in the&nbsp;\n                           <a href=\"https://github.com/web-platform-tests/wpt-metadata\">wpt-metadata</a> repository.\n                         </p>;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": (<div className=\"note\">\n                         <p>\n                           Custom filters are boolean expressions with logical operators\n                           &nbsp;<code>and</code>, <code>or</code>, and <code>not</code>`,\n                           equality operators <code>{\"==\"}</code>, and <code>!=</code>\n                           and custom operators <code>in</code> for text substrings\n                           and <code>has</code> for testing if a field exists.\n                         </p>\n                         <p>\n                           Available fields are <code>test</code> for the test title and\n                           <code>_geckoMetadata</code> for fields set from gecko metadata\n                           Gecko metadata fields include <code>bug</code> and\n                           <code>lsan-allowed</code>\n                         </p>\n                         <p>\n                           The <code>:</code> operator performs a default operation depending\n                           on the selected field</p>\n                         <p>\n                           Examples:\n                         </p>\n                         <ul>\n                           <li><code>historical in test</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>test:historical</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                         </ul>\n                        </div>)\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return [<dt key=\"term\">Filter:</dt>,\n                (<dd key=\"value\">\n                   <Select options={options}\n                           value={this.state.type}\n                           onChange={this.onTypeChange}/>\n                   {this.state.type === \"custom\" ? <TextInput onChange={this.onExprChange}\n                                                              defaultValue={this.state.expr}/> : null}\n                   {optionText.hasOwnProperty(this.state.type) ?\n                    optionText[this.state.type] : null}\n                 </dd>)];\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {Checkbox, TextInput, Select, SelectMultiple} from './form';\nimport {MetadataEditor} from './metaeditor';\nimport {Filter} from './filterselector';\nimport {urlParams} from './urlparams';\n\nconst TASK_INDEX_BASE = \"https://firefox-ci-tc.services.mozilla.com/api/index/v1\";\nconst TASK_QUEUE_BASE = \"https://firefox-ci-tc.services.mozilla.com/api/queue/v1\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\nconst WPT_FYI_STAGING_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst browsers = [\"chrome\", \"firefox\", \"safari\"];\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nconst bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n\nfunction makeWptFyiUrl(path, params={}, staging=false) {\n    let base = staging ? WPT_FYI_STAGING_BASE : WPT_FYI_BASE;\n    let url = new URL(`${base}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    params = new Map(Object.entries(params));\n    for (let [key, value] of defaults) {\n        if (!params.has(key)) {\n            url.searchParams.append(key, value);\n        }\n    }\n    for (let [key, value] of params) {\n        if (value === null || value === undefined) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    if (str) {\n        return str && str[0].toUpperCase() + str.slice(1);\n    } else {\n        return \"\";\n    }\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            runSha: null,\n            wptRuns: null,\n            wptMetadata: null,\n            geckoMetadata: {},\n            pathGeckoMetadata: {},\n            errors: [],\n            haveData: {\n                bugComponent: false,\n                geckoMetadata: false,\n                wptMetadata: false,\n                wptRun: false,\n            },\n            filter: null,\n            filterFunc: null,\n            queryTerms: [],\n            metadataPendingChanges: new Map(),\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filterFunc, queryTerms) => {\n        this.setState({filterFunc, queryTerms});\n    }\n\n    onRunChange = (runSha) => {\n        this.setState({runSha});\n    }\n\n    onMetadataPendingSubmit = async () => {\n        let isMatch = (item, change) => (item.product === \"firefox\" &&\n                                         item.url === change.url &&\n                                         item.subtest === change.subtest &&\n                                         item.status === change.status);\n\n\n        console.log(this.state.metadataPendingChanges);\n        let changedMeta = {};\n        for (let [test, changes] of this.state.metadataPendingChanges) {\n            // Flatten out the metadata\n            let meta = [];\n            let prevMetadata = this.state.wptMetadata[test];\n            if (prevMetadata) {\n                for (let item of prevMetadata) {\n                    if (item.results) {\n                        for (let result of item.results) {\n                            meta.push({...item, ...result});\n                        }\n                    } else {\n                        meta.push({...item});\n                    }\n                }\n            }\n\n            for (let change of changes) {\n                if (change.change === \"REMOVE\") {\n                    meta = meta.filter(item => !isMatch(item, change));\n                } else if (change.change === \"ADD\") {\n                    if (!meta.some(item => isMatch(item, change))) {\n                        let newMeta = {product: \"firefox\",\n                                       url: change.url};\n                        if (change.subtest) {\n                            newMeta.subtest = change.subtest;\n                        }\n                        if (change.status) {\n                            newMeta.status = change.status;\n                        }\n                        meta.push(newMeta);\n                    }\n                }\n            }\n            console.log(\"meta\", meta);\n            changedMeta[test] = [];\n            // Now unflatten the metadata\n            let index = new Map();\n            for (let newMeta of meta) {\n                let key = [newMeta.product, newMeta.url].join(\",\");\n                if (!index.has(key)) {\n                    index.set(key, changedMeta[test].length);\n                    changedMeta[test].push({product: newMeta.product, url:newMeta.url});\n                }\n                if (newMeta.subtest || newMeta.status) {\n                    let item = changedMeta[test][index.get(key)];\n                    if (!item.results) {\n                        item.results = [];\n                    }\n                    let result = {};\n                    if (newMeta.subtest) {\n                        result.subtest = {};\n                    }\n                    if (newMeta.status) {\n                        result.status = newMeta.status;\n                    }\n                    item.results.push(result);\n                }\n            }\n        }\n        await this.patchMetadata(changedMeta);\n        this.setState({metadataPendingChanges: new Map()});\n    }\n\n    onMetadataPendingCancel = () => {\n        this.setState({metadataPendingChanges: new Map()});\n    }\n\n    onMetadataChange = (change) => {\n        console.log(\"onMetadataChange\", change);\n        let metadataPendingChanges = new Map(this.state.metadataPendingChanges);\n        if (!metadataPendingChanges.has(change.test)) {\n            metadataPendingChanges.set(change.test, []);\n        }\n        // TODO: consolidate changes\n        metadataPendingChanges.get(change.test).push(change);\n        this.setState({metadataPendingChanges});\n    }\n\n    async patchMetadata(data) {\n        let body = JSON.stringify(data);\n        if (window.location.hostname !== \"jgraham.github.io\") {\n            this.onError(new Error(`Unable to submit data from ${window.location.hostname}`), {});\n            console.error(data);\n            return null;\n        }\n        let url = makeWptFyiUrl(\"api/metadata\", {\"product\": \"firefox\"}, true);\n        const response = await fetch(url, {\n            method: 'PATCH',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body\n        });\n        return await response.json();\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/task/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/task/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/task/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/task/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        this.setState({haveData: {...this.state.haveData, bugComponent: false}});\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n        this.setState({haveData: {...this.state.haveData, bugComponent: true}});\n    }\n\n    async loadWptRunData() {\n        this.setState({haveData: {...this.state.haveData, wptRun: false}});\n        let params = {aligned: \"\"};\n        if (this.state.runSha) {\n            params[\"sha\"] = this.state.runSha;\n        }\n        let runsUrl = makeWptFyiUrl(\"api/runs\", params);\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        let runSha = runs[0].full_revision_hash;\n        this.setState({wptRuns: runs, runSha});\n        this.setState({haveData: {...this.state.haveData, wptRun: true}});\n    }\n\n    async loadWptMetadata() {\n        this.setState({haveData: {...this.state.haveData, wptMetadata: false}});\n        let params = {\"product\": [\"firefox\"]};\n        let metaUrl = makeWptFyiUrl(\"api/metadata\", params);\n        let metadata = await this.fetchData(metaUrl, async () => this.loadWptMetadata());\n        this.setState({wptMetadata: metadata});\n        this.setState({haveData: {...this.state.haveData, wptMetadata: true}});\n    }\n\n    async loadGeckoMetadata() {\n        this.setState({haveData: {...this.state.haveData, geckoMetadata: false}});\n        let metadata = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-wpt-metadata-summary\",\n                                                      \"summary.json\");\n        this.setState({geckoMetadata: metadata});\n        this.setState({haveData: {...this.state.haveData, geckoMetadata: true}});\n    }\n\n    async componentDidMount() {\n        await Promise.all([this.loadBugComponentData(),\n                           this.loadWptRunData(),\n                           this.loadWptMetadata(),\n                           this.loadGeckoMetadata()]);\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathGeckoMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n        if (prevState.runSha !== this.state.runSha) {\n            await this.loadWptRunData();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body = [];\n        if (this.state.runSha) {\n            body.push(<section id=\"selector\" key=\"selector\">\n                        <dl>\n                          <RunInfo runSha={this.state.runSha}\n                                   onChange={this.onRunChange} />\n                          <BrowserInfo runs={this.state.wptRuns} />\n                          <BugComponentSelector onComponentChange={this.onComponentChange}\n                                                components={this.state.bugComponents}\n                                                value={this.state.currentBugComponent} />\n                          <Filter onChange={this.onFilterChange} />\n                          <TestPaths\n                            paths={paths}\n                            selectedPaths={this.state.selectedPaths}\n                            onChange={this.onPathsChange} />\n                        </dl>\n                        </section>);\n        }\n        if (Object.values(this.state.haveData).includes(false)) {\n            body.push(<section id=\"details\" key=\"details\">\n                        <p>Loading…</p>\n                      </section>);\n        } else {\n            body.push(\n                <section id=\"details\" key=\"details\">\n                  <Tabs>\n                    <ResultsView label=\"Interop Comparison\"\n                                 runs={this.state.wptRuns}\n                                 paths={this.state.selectedPaths}\n                                 geckoMetadata={this.state.pathGeckoMetadata}\n                                 wptMetadata={this.state.wptMetadata}\n                                 onError={this.onError}\n                                 filter={this.state.filterFunc}\n                                 queryTerms={this.state.queryTerms}\n                                 onMetadataChange={this.onMetadataChange}>\n                      <h2>Interop Comparison</h2>\n                    </ResultsView>\n                    <GeckoData label=\"Gecko Data\"\n                               data={this.state.pathGeckoMetadata}\n                               paths={this.state.selectedPaths}\n                               onError={this.onError}>\n                      <h2>Gecko metadata</h2>\n                      <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                      <p>Note: this data is currently not kept up to date</p>\n                    </GeckoData>\n                  </Tabs>\n                  <MetadataEditor changes={this.state.metadataPendingChanges}\n                                  onSubmit={this.onMetadataPendingSubmit}\n                                  onCancel={this.onMetadataPendingCancel} />\n                </section>);\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            console.log(error);\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newSha: null,\n            runShas: []\n        };\n    }\n\n    onInputChange = (value) => {\n        this.setState({newSha: value});\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newSha);\n        this.setState({editable: false});\n    }\n\n    async componentDidMount() {\n        let url = makeWptFyiUrl(\"/api/runs\", {\"max-count\": \"100\"});\n        let runs = await fetchJson(url);\n        let browserRuns = new Map();\n        for (let run of runs) {\n            if (!browserRuns.has(run.revision)) {\n                browserRuns.set(run.revision, new Set());\n            }\n            browserRuns.get(run.revision).add(run.browser_name);\n        }\n        let runShas = [];\n        for (let run of runs) {\n            if (browserRuns.has(run.revision) && browserRuns.get(run.revision).size === 3) {\n                runShas.push(run.revision);\n            }\n            browserRuns.delete(run.revision);\n        }\n        this.setState({runShas});\n    }\n\n    render() {\n        if (!this.props.runSha && !this.state.editable) {\n            return null;\n        }\n        let url = makeWptFyiUrl(\"\", {sha: this.props.runSha});\n        return [<dt key=\"term\">wpt SHA1:</dt>,\n                this.state.editable ?\n                 (<dd key=\"value\">\n                      {this.state.runShas ?\n                       (<datalist id=\"runShasData\">\n                          {this.state.runShas.map(x => <option key={x} value={x}/>)}\n                        </datalist>) : null}\n                    <TextInput defaultValue={this.props.runSha}\n                               onChange={this.onInputChange}\n                               list=\"runShasData\"/>\n                    <button onClick={this.onUpdateClick}>\n                      Update\n                    </button>\n                  </dd>):\n                 (<dd key=\"value\">\n                    <a href={url}>{this.props.runSha.slice(0,12)}</a>\n                    &nbsp;&nbsp;\n                    <button onClick={this.onEditClick}>\n                      Edit\n                    </button>\n                  </dd>\n                 )];\n    }\n}\n\nclass BrowserInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let browsers = this.props.runs.map(run => {\n            return (<li key={run.browser_name}>\n               {capitalize(run.browser_name)} {run.browser_version} ({run.os_name})\n             </li>);\n        });\n        return [<dt key=\"term\">Browsers:</dt>,\n                (<dd key=\"value\">\n                   <ul>{browsers}</ul>\n                 </dd>)];\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return [<dt key=\"term\">Bug Component:</dt>,\n                (<dd key=\"value\">\n                   <Select\n                     onChange={this.handleChange}\n                     value={this.props.value}\n                     options={options}/>\n                 </dd>)];\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <label>\n                <Checkbox\n                  checked={this.props.selectedPaths.has(path)}\n                  value={path}\n                  onCheckboxChange={this.onCheckboxChange} />\n                {path}\n              </label>\n            </li>));\n        return [<dt key=\"term\">Test Paths</dt>,\n                (<dd key=\"value\">\n                   <button\n                     onClick={this.onUpdateClick}\n                     disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                     Update\n                   </button>\n                   <ul id=\"test-paths\">\n                     {listItems}\n                   </ul>\n                </dd>)];\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.defaultBrowsers = {\n            failsIn: [\"firefox\"],\n            passesIn: [\"chrome\", \"safari\"]\n        };\n        let comparison = this.getComparison();\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null,\n            passesIn: comparison.passesIn,\n            failsIn: comparison.failsIn,\n        };\n    }\n\n    getComparison() {\n        let rv = {};\n        for (let [key, value] of Object.entries(this.defaultBrowsers)) {\n            rv[key] = value.slice();\n        }\n        for (let key of Object.keys(rv)) {\n            if (urlParams.has(key)) {\n                let value = urlParams.get(key);\n                let listValue = value.split(\",\").filter(x => browsers.includes(x));\n                if (!value.length || listValue.length) {\n                    rv[key] = listValue;\n                }\n            }\n        }\n        return rv;\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.state.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.state.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        let paths = Array.from(this.props.paths);\n        if (paths.length > 1) {\n            topAndClause.push({\"or\": paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: paths[0]});\n        }\n\n        for (let term of this.props.queryTerms) {\n            topAndClause.push(term);\n        }\n\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(Array.from(this.props.paths).map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => {\n            result._wptMetadata = this.getWptMetadata(result.test);\n            result._geckoMetadata = this.getGeckoMetadata(result.test);\n        });\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getWptMetadata(test) {\n        let metadata = new Map();\n        if (this.props.wptMetadata[test]) {\n            for (let meta of this.props.wptMetadata[test]) {\n                let metaEntry = {...meta};\n                let product = metaEntry.product;\n                delete metaEntry.product;\n                if (!metadata.has(product)) {\n                    metadata.set(product, []);\n                }\n                metadata.get(product).push(metaEntry);\n            }\n        }\n        return metadata;\n    }\n\n    getGeckoMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    onBrowserChange = (passesIn, failsIn) => {\n        this.setState({passesIn, failsIn});\n        for (let [key, values] of [[\"passesIn\", passesIn],\n                                   [\"failsIn\", failsIn]]) {\n            values = values.sort();\n            if (!arraysEqual(values, this.defaultBrowsers[key])) {\n                urlParams.set(key, values.join(\",\"));\n            } else {\n                urlParams.delete(key);\n            }\n        }\n    }\n\n    render() {\n        let data;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n           data = (<div>\n                      <p>Loading…</p>\n                    </div>);\n        } else if (this.state.results === null) {\n            data = (<div>\n                      <p>Load failed</p>\n                    </div>);\n        } else if (!this.state.results.results.length) {\n            data = (<div>\n                      <p>No results</p>\n                    </div>);\n        } else {\n            let results = this.state.filteredResults ? this.state.filteredResults : [];\n            let testItems = results.map(result => (<TestItem\n                                                     failsIn={this.state.failsIn}\n                                                     passesIn={this.state.passesIn}\n                                                     runs={this.props.runs}\n                                                     result={result}\n                                                     key={result.test}\n                                                     geckoMetadata={result._geckoMetadata || new Map()}\n                                                     wptMetadata={result._wptMetadata}\n                                                     onMetadataChange={this.props.onMetadataChange}\n                                                     onError={this.props.onError}/>));\n            testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n            data = [(<p key=\"desc\">{results.length} top-level tests with\n                       &nbsp;{results\n                              .map(x => x.legacy_status[0].total)\n                              .reduce((x,y) => x+y, 0)} subtests</p>),\n                    <ul key=\"data\">{testItems}</ul>];\n        }\n        return (<div>\n                  {this.props.children}\n                  <ResultsViewSummary failsIn={this.state.failsIn}\n                                      passesIn={this.state.passesIn}\n                                      onChange={this.onBrowserChange}/>\n                  {data}\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({}, {});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps, prevState);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps, prevState) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.state.failsIn === prevState.failsIn &&\n            this.state.passesIn === prevState.passesIn &&\n            this.props.queryTerms === prevProps.queryTerms) {\n            return;\n        }\n        if (!this.props.paths.size) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass ResultsViewSummary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newPassesIn: this.props.passesIn,\n            newFailsIn: this.props.failsIn,\n        };\n    }\n\n    joinList(items) {\n        if (!items.length) {\n            return \"\";\n        }\n        if (items.length === 1) {\n            return items[0];\n        }\n        let commaSeparated = items.slice(0, items.length - 1).join(\", \");\n        return `${commaSeparated}, and ${items[items.length - 1]}`;\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onSelectChange = (data, type) => {\n        let key;\n        let state = {};\n        if (type === \"passesIn\") {\n            key = \"newPassesIn\";\n        } else if (type === \"failsIn\") {\n            key = \"newFailsIn\";\n        } else {\n            console.error(`Unknown key ${type}`);\n        }\n        state[key] = data;\n        this.setState(state);\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newPassesIn, this.state.newFailsIn);\n        this.setState({editable: false});\n    }\n\n    render() {\n        if (!this.state.editable) {\n            let text;\n            if (this.props.passesIn.length && this.props.failsIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}\nbut not in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            } else if (this.props.passesIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}`;\n            } else {\n                text = `Tests that don't pass in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            }\n            return (<p>\n                      {text}\n                      &nbsp;\n                      <button onClick={this.onEditClick}>\n                        Edit\n                      </button>\n                    </p>);\n        } else {\n            let passInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.passesIn.includes(x)\n            };});\n            let failInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.failsIn.includes(x)\n            };});\n            return (<p>Tests that\n                      &nbsp;<label>pass in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"passesIn\")}\n                          options={passInOptions}/>\n                      </label>\n                      &nbsp;but\n                      <label>\n                        &nbsp;not in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"failsIn\")}\n                          options={failInOptions}/>\n                      </label>\n                      &nbsp;\n                      <button\n                        onClick={this.onUpdateClick}\n                        disabled={this.state.newPassesIn.length === 0 && this.state.newFailsIn.length === 0}>\n                        Update\n                      </button>\n                    </p>);\n        }\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    wptMetadata={this.props.wptMetadata}\n                    onError={this.props.onError}\n                    onMetadataChange={this.props.onMetadataChange} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           test={this.props.test}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)}\n                                                                           wptMetadata={this.props.wptMetadata}\n                                                                           onMetadataChange={this.props.onMetadataChange} />));\n        return (<div>\n                  <section>\n                    <ul className=\"links\">\n                      <li><a href={`http://wpt.live${this.props.test}`}>View Test</a></li>\n                      <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>All Results</a></li>\n                      <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                      <li>\n                        <WptTestMetadata\n                          test={this.props.test}\n                          subtest={null}\n                          wptMetadata={this.props.wptMetadata}\n                          onChange={this.props.onMetadataChange} />\n                      </li>\n                    </ul>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                    <GeckoMetaSummary test={this.props.test}\n                                      geckoMetadata={this.props.geckoMetadata} />\n                  </section>\n                </div>);\n    }\n}\n\nclass WptTestMetadata extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            testMetadata: [],\n            addLink: false,\n            newLinkValue: null\n        };\n    }\n\n    componentDidMount() {\n        this.filterBugLinks();\n    }\n\n    onInputChange = (value) => {\n        this.setState({newLinkValue: value});\n    }\n\n    onAddLink = () => {\n        let bugUrl = `https://bugzilla.mozilla.org/show_bug.cgi?id=${this.state.newLinkValue}`;\n        this.props.onChange({test: this.props.test,\n                             subtest: this.props.subtest,\n                             change: \"ADD\",\n                             url: bugUrl});\n        let testMetadata = this.state.testMetadata.concat([{url: bugUrl}]);\n        this.setState({addLink: false, newLinkValue: null, testMetadata});\n    }\n\n    onRemoveLink = (url) => {\n        this.props.onChange({test: this.props.test,\n                             subtest: this.props.subtest,\n                             change: \"REMOVE\",\n                             url: url});\n        let testMetadata = this.state.testMetadata.filter(item => item.url !== url);\n        this.setState({testMetadata});\n    }\n\n    render() {\n        let bugLinks;\n        if (this.state.testMetadata.length) {\n            bugLinks = this.state.testMetadata.map(item => {\n                return <MetadataBugLink key={item.url}\n                                        url={item.url}\n                                        onRemove={this.onRemoveLink} />;\n            });\n        } else {\n            bugLinks = <span>None</span>;\n        }\n        let controlElements;\n        if (this.state.addLink) {\n            controlElements = (<div>\n                                 <TextInput\n                                   onChange={this.onInputChange}/>\n                                 <button onClick={this.onAddLink}>Add</button>\n                                 <button onClick={() => this.setState({addLink: false, newLinkValue: null})}>Cancel</button>\n                             </div>);\n        } else {\n            controlElements = <button onClick={() => this.setState({addLink: true})}>+</button>;\n        }\n        return (<div>\n                Gecko Bugs: {bugLinks}\n                  {controlElements}\n                </div>);\n    }\n\n    filterBugLinks() {\n        let fxMetadata = this.props.wptMetadata.get(\"firefox\");\n        if (!fxMetadata) {\n            return;\n        }\n        let testMetadata = [];\n        for (let meta of fxMetadata) {\n            if (!bugLinkRe.exec(meta.url)) {\n                continue;\n            }\n            if (!meta.results) {\n                if (!this.props.subtest) {\n                    testMetadata.push(meta);\n                }\n            } else {\n                let relevantResults = meta.results.filter(result => (!result.subtest && !this.props.subtest) ||\n                                                          (result.subtest === this.props.subtest));\n                if (relevantResults.length) {\n                    testMetadata.push({...meta, results: relevantResults});\n                }\n            }\n        }\n        this.setState({testMetadata});\n    }\n}\n\nclass MetadataBugLink extends Component {\n    render() {\n        return (<span>\n                <MaybeBugLink value={this.props.url} />\n                <button onClick={() => this.props.onRemove(this.props.url)}>-</button>\n                </span>);\n    }\n}\n\nclass GeckoMetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items = [];\n        if (this.props.geckoMetadata) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug},\n                             {name: \"intermittent\", render: value => JSON.stringify(value)}];\n            for (let prop of metaProps) {\n                if (this.props.geckoMetadata.has(prop.name)) {\n                    items.push(<InlineOrTreeMetadata\n                                 key={prop.name}\n                                 title={prop.title ? prop.title : capitalize(prop.name)}\n                                 values={this.props.geckoMetadata.get(prop.name)}\n                                 render={prop.render}/>);\n                }\n            }\n        };\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <WptTestMetadata\n                       test={this.props.test}\n                       subtest={this.props.subtest}\n                       wptMetadata={this.props.wptMetadata}\n                       onChange={this.props.onMetadataChange} />\n                     <GeckoMetaSummary\n                       geckoMetadata={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = {unconditional: new Map(), conditional: new Map()};\n        let intermittent = {unconditional: new Map(), conditional: new Map()};\n        let lsan = {unconditional: new Map(), conditional: new Map()};\n        let crashes = {unconditional: new Map(), conditional: new Map()};\n        let set = (key, data, dest, mapFn) => {\n            let destKey;\n            if (!data || !data.length) {\n                return;\n            }\n            destKey = (data.length === 1 && (data[0] === null || data[0][0] === null)) ? \"unconditional\": \"conditional\";\n            if (mapFn) {\n                data = data.map(mapFn);\n            }\n            dest[destKey].set(key, data);\n        };\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            set(dir, dirData.disabled, disabled);\n            set(dir, dirData['lsan-allowed'], lsan);\n            set(dir, dirData.expected_CRASH, crashes, cond => [cond, null]);\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                set(testKey, testData.disabled, disabled);\n                set(testKey, testData.intermittent, intermittent);\n                set(testKey, testData.expected_CRASH, crashes, cond => [cond, null]);\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    set(subtestKey, subtestData.disabled, disabled);\n                    set(subtestKey, subtestData.intermittent, intermittent);\n                    set(subtestKey, subtestData.expected_CRASH, crashes, cond => [cond, null]);\n                }\n            }\n        }\n        return {disabled, intermittent, lsan, crashes};\n    }\n\n    render() {\n        if (!this.props.data) {\n            return <p>Loading</p>;\n        }\n        let byType = this.groupData();\n        if (byType === null ||\n            !Object.values(byType).some(typeValues => Object.values(typeValues).some(x => x.size > 0))) {\n            return (<section>\n                      <h2>Gecko metadata</h2>\n                      <p>None</p>\n                      </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <GeckoDataSection\n                    key=\"crashes\"\n                    data={byType.crashes}\n                    render={value => null}\n                    title=\"Crashes\"\n                    desc=\"tests crash\" />\n                  <GeckoDataSection\n                    key=\"disabled\"\n                    data={byType.disabled}\n                    render={value => <MaybeBugLink value={value} />}\n                    title=\"Disabled\"\n                    desc=\"tests are disabled\" />\n                  <GeckoDataSection\n                    key=\"intermittent\"\n                    data={byType.intermittent}\n                    render={value => <StatusListValue value={value} />}\n                    title=\"Intermittent\"\n                    desc=\"tests are intermittent\" />\n                  <GeckoDataSection\n                    key=\"lsan\"\n                    data={byType.lsan}\n                    render={value => <LsanListValue value={value} />}\n                    title=\"LSAN Failures\"\n                    desc=\"directories have LSAN failures\"/>\n                </section>);\n    }\n}\n\n\nclass GeckoDataSection extends Component {\n    render() {\n        let {conditional, unconditional} = this.props.data;\n        if (!conditional.size && !unconditional.size) {\n            return null;\n        }\n        let count = 0;\n        let items = [];\n        for (let [type, typeData] of [[\"In all configurations\", unconditional],\n                                      [\"In some configurations\", conditional]]) {\n            if (!typeData.size) {\n                continue;\n            }\n            items.push(<h4 key={type}>{type}</h4>);\n            for (let [test, values] of iterMapSorted(typeData)) {\n                count++;\n                items.push(<GeckoMetadataLine\n                             key={test}\n                             title={test}\n                             values={values}\n                             render={this.props.render}/>);\n            }\n        }\n        return (<section>\n                  <h3>{this.props.title}</h3>\n                  <p>{count} {this.props.desc}</p>\n                  <ul>{items}</ul>\n                </section>);\n    }\n\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\nclass StatusListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let statuses = this.props.value.map(x => <code>{x}</code>)\n                .reduce((prev, current) => prev.length ? prev.concat([\", \", current]) : [current], []);\n            return (<code>{statuses}</code>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}