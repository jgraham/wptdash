{"version":3,"sources":["utils.js","filter.js","form.js","App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","tokenize","FilterError","Error","handlers","and","data","args","child","push","filterCompiler","operators","apply","or","==","not","_ref","Object","slicedToArray","in","_ref3","_len","arguments","_key","ctx","x","_len2","_key2","some","_ref5","_ref6","arg","_ref7","_ref8","lhs","rhs","ctxValue","getValue","includes","keyParts","split","target","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","part","Map","input","console","error","op","hasOwnProperty","concat","ParseError","space","term","initialLength","m","skip","token","match","slice","abrupt","filter_marked","operatorTokens","Set","unaryOperators","precedenceGroups","operatorPrecedence","filter_step4","filter_iterator4","filter_iteratorNormalCompletion4","_ref12","filter_ref10","groupIdx","group","filter_iteratorNormalCompletion6","filter_didIteratorError6","filter_iteratorError6","filter_step6","filter_iterator6","set","operatorAliases","entries","!","defaultOperator","test","Node","name","classCallCheck","obj","children","to_object","UnaryOperatorNode","_this","possibleConstructorReturn","getPrototypeOf","call","operand","BinaryOperatorNode","_this2","ValueNode","createOperatorNode","Parser","operands","tokens","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","top","pop","precedence","operator","_ref11","transformDefaultOperator","parseExpr","expr","parse","Checkbox","_Component","props","handleChange","event","setState","checked","onCheckboxChange","state","inherits","createClass","react_default","createElement","type","onChange","Component","TextInput","_Component2","_getPrototypeOf2","defaultValue","list","Select","_Component3","_getPrototypeOf3","_this3","selectItems","options","option","SelectMultiple","_Component4","_getPrototypeOf4","_this4","_len3","_key3","selectedOptions","selected","multiple","CheckboxMultiple","_Component5","_this5","is_selected","prevProps","prevState","_this6","form_Checkbox","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","browsers","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","makeWptFyiUrl","path","params","url","URL","defaults","_ref2","searchParams","append","_loop","_ref4","forEach","capitalize","str","toUpperCase","FetchError","resp","message","status","statusText","fetchJson","_callee18","_context18","fetch","sent","ok","json","anyRe","workerRe","testToPath","pathname","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","_update","delete","makeError","id","App","onError","errors","onDismissError","idx","findIndex","splice","onFilterChange","filterFunc","onRunChange","runSha","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","filter","retry","redirect","indexName","artifactName","_callee2","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","aligned","runsUrl","asyncToGenerator","mark","_callee5","_context5","loadWptRunData","full_revision_hash","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","loadGeckoMetadata","Promise","all","pathRe","makeRe","notPaths","values","notPathRe","allMetadata","_arr","_i2","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","_stack$pop2","basePath","found","_arr2","_i3","filename","relPath","filterGeckoMetadata","body","App_RunInfo","App_BrowserInfo","App_BugComponentSelector","App_Filter","App_TestPaths","App_Tabs","App_ResultsView","label","App_GeckoData","App_ErrorArea","ErrorArea","onDismiss","errorLines","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop2","_ref9","App_ErrorLine","_iterator4","className","ErrorLine","_this7","_this$props$error","extraControls","onClick","RunInfo","_this8","onInputChange","newSha","onEditClick","editable","onUpdateClick","runShas","max-count","browserRuns","revision","add","browser_name","_iterator6","_iteratorNormalCompletion6","_step6","sha","form_TextInput","BrowserInfo","browser_version","os_name","BugComponentSelector","_this9","form_Select","Filter","_this10","types","none","untriaged","triaged","custom","onTypeChange","onExprChange","ast","clearTimeout","timer","e","setTimeout","log","_this10$getType","getType","_this10$getType2","afterFilterUpdate","urlValue","parts","triageText","optionText","_ref10","TestPaths","_this11","_this12","listItems","disabled","ResultsView","_this13","onBrowserChange","passesIn","failsIn","_arr3","_i4","_ref14","_ref13","defaultBrowsers","comparison","getComparison","results","filteredResults","rv","_arr4","_i5","_ref17","_ref16","_arr5","_i6","listValue","query","run_ids","topAndClause","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","browser","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","orClause","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","pattern","searchQuery","buildQuery","method","JSON","stringify","headers","Content-Type","_context12","_retry","_callee11","_context11","_this14","fetchResults","result","_geckoMetadata","getMetadata","dirParts","testName","dirPath","copyMeta","src","_arr6","_i7","_ref20","_ref19","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr7","_i8","_ref23","_ref22","_this15","_this16","testItems","App_TestItem","legacy_status","total","reduce","y","App_ResultsViewSummary","fetchIfPossible","updateFilteredResults","ResultsViewSummary","_this17","onSelectChange","newPassesIn","newFailsIn","items","commaSeparated","text","_this18","passInOptions","failInOptions","form_CheckboxMultiple","form_SelectMultiple","joinList","TreeRow","_this19","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this20","loaded","_this21","resultBySubtest","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_ref28","_ref25","browserResults","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","subtests","subtest","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","resultByBrowser","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","filteredResultBySubtest","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_loop3","_ref26","_ref27","_iterator14","resultData","promises","_iterator17","_iteratorNormalCompletion17","_step17","summaryUrl","results_url","promise","then","success","catch","resolved","_iterator18","_iteratorNormalCompletion18","_step18","_ref31","_ref30","processResultData","_this22","headerRow","subtestMetadata","resultRows","_ref32","_ref33","App_ResultRow","App_MetaSummary","MetaSummary","_this23","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this24","cells","App_ResultCell","ResultCell","GeckoData","unconditional","conditional","lsan","crashes","dest","mapFn","destKey","_arr8","_i9","_ref36","_ref35","dir","dirData","expected_CRASH","cond","_arr9","_i10","_ref39","_ref38","testData","testKey","_arr10","_i11","_ref42","_ref41","subtestData","subtestKey","byType","groupData","typeValues","App_GeckoDataSection","desc","App_LsanListValue","GeckoDataSection","_this$props$data","_arr11","_i12","_ref45","_ref44","typeData","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref48","_ref47","GeckoMetadataLine","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_ref51","_ref50","condition","conditionStr","valueList","MaybeBugLink","_arr12","_i13","LsanListValue","frames","Tabs","_this25","handleClickTab","activeTab","_this26","tabItems","App_Tab","active","activeTabContent","Tab","_this27","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a62079b5.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    \"==\": (data)  => {\n        return operators[\"==\"](data);\n    },\n\n    not: ([data]) => {\n        return operators.not(filterCompiler(data));\n    },\n\n    in: (data) => {\n        return operators.in(data);\n    },\n\n    has: ([data]) => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    \"==\": ([lhs, rhs]) => {\n        return lhs === rhs;\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    in: ([lhs, rhs]) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, rhs);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(lhs);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(input);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        console.error(input);\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\nclass ParseError extends Error{};\n\nfunction* tokenize(input) {\n    let space = /\\s*/;\n    let term = /\\w(?:\\w|\\d|\\.|_|-|\\+|\\/)*|\\d+|==|!=|\\(|\\)|:|\".*?[^\\\\]\"|'.*?[^\\\\]'/;\n\n    let initialLength = input.length;\n\n    while (input.length) {\n        // Skip spaces\n        let m = input.match(space);\n        if (m[0].length) {\n            let skip = m[0].length;\n            input = input.slice(skip);\n            if (!input.length) {\n                break;\n            }\n        }\n\n        //Match the next token\n        m = input.match(term);\n        if (!m) {\n            throw new ParseError(`Invalid input at character ${initialLength - input.length}`);\n        }\n        let token = m[0];\n        yield token;\n        input = input.slice(token.length);\n    }\n}\n\nconst operatorTokens = new Set([\"==\", \"!=\", \"in\", \"and\", \"or\", \"!\", \"not\", \":\", \"has\"]);\nconst unaryOperators = new Set([\"!\", \"not\", \"has\"]);\n\nconst precedenceGroups = [[\":\"], [\"in\", \"==\", \"!=\", \"has\"], [\"not\", \"!\"], [\"and\"], [\"or\"]];\nconst operatorPrecedence = new Map();\n\nfor (let [groupIdx, group] of precedenceGroups.map((x, i) => [i, x])) {\n    for (let op of group) {\n        operatorPrecedence.set(op, precedenceGroups.length - groupIdx);\n    }\n}\n\nconst operatorAliases = new Map(Object.entries({\"!\": \"not\"}));\n\nconst defaultOperator = new Map(Object.entries({test: \"in\"}));\n\n\nclass Node {\n    constructor(name) {\n        this.name = name;\n    }\n\n    to_object() {\n        let obj = {};\n        obj[this.name] = this.children().map(x => x.to_object());\n        return obj;\n    }\n}\n\nclass UnaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || !unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.operand = null;\n    }\n\n    children() {\n        return [this.operand];\n    }\n}\n\nclass BinaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.lhs = null;\n        this.rhs = null;\n    }\n\n    children() {\n        return [this.lhs, this.rhs];\n    }\n}\n\nclass ValueNode extends Node {\n    constructor(name) {\n        if (name[0] === \"'\" || name[0] === '\"') {\n            name = name.slice(1, name.length - 1);\n        }\n        super(name);\n    }\n    to_object() {\n        return this.name;\n    }\n}\n\nfunction createOperatorNode(token) {\n    if (unaryOperators.has(token)) {\n        return new UnaryOperatorNode(token);\n    }\n    return new BinaryOperatorNode(token);\n}\n\nfunction transformDefaultOperator(operator) {\n    // The default operator creates a different kind of relation depending on the arguments\n    let op = \"==\";\n    if (defaultOperator.has(operator.lhs.name)) {\n        op = defaultOperator.get(operator.lhs.name);\n    }\n    operator.name = op;\n    if (op === \"in\") {\n        [operator.lhs, operator.rhs] = [operator.rhs, operator.lhs];\n    }\n    return operator;\n}\n\nclass Parser {\n    constructor() {\n        this.operators = [];\n        this.operands = [];\n    }\n\n    top() {\n        return this.operators.length ? this.operators[this.operators.length - 1] : null;\n    }\n\n    parse(tokens) {\n        for (let token of tokens) {\n            if (token === \"(\") {\n                this.operators.push(token);\n            } else if (token === \")\") {\n                while(this.top() !== null && this.top() !== \"(\") {\n                    this.apply();\n                }\n                if (!this.operators.length) {\n                    throw new ParseError(\"Mismatched parens\");\n                }\n                this.operators.pop();\n            } else if (operatorTokens.has(token)) {\n                while (this.top() !== null &&\n                       this.top() !== \")\" &&\n                       this.precedence(this.top().name) >= this.precedence(token)) {\n                    this.apply();\n                }\n                this.operators.push(createOperatorNode(token));\n            } else {\n                this.operands.push(new ValueNode(token));\n            }\n        }\n        while (this.operators.length) {\n            this.apply();\n        }\n        if (this.operands.length !== 1) {\n            throw new ParseError(\"Operands remaining at end of input\");\n        }\n        return this.operands[0];\n    }\n\n    precedence(token) {\n        return operatorPrecedence.get(token);\n    }\n\n    apply() {\n        let operator = this.operators.pop();\n        if (unaryOperators.has(operator.name)) {\n            let operand = this.operands.pop();\n            if (!operand) {\n                throw new Error();\n            }\n            operator.operand = operand;\n        } else {\n            let rhs = this.operands.pop();\n            let lhs = this.operands.pop();\n            if (!lhs || !rhs) {\n                throw new Error();\n            }\n            operator.lhs = lhs;\n            operator.rhs = rhs;\n            if (operator.name === \":\") {\n                operator = transformDefaultOperator(operator);\n            }\n        }\n        this.operands.push(operator);\n    }\n}\n\n\nexport function parseExpr(expr) {\n    let parser = new Parser();\n    return parser.parse(tokenize(expr)).to_object();\n}\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  onChange={this.handleChange}\n                  defaultValue={this.props.defaultValue}\n                  list={this.props.list}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class SelectMultiple extends Component {\n    handleChange = (event) => {\n        let selectedOptions = event.target.selectedOptions;\n        this.props.onChange([].map.call(selectedOptions, x => x.value));\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => (\n            <option value={option.value}\n                    key={option.value}\n                    selected={option.selected}>\n              {option.name}\n            </option>));\n        return (<select\n                  size=\"3\"\n                  multiple\n                  onChange={this.handleChange}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class CheckboxMultiple extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: new Map()\n        };\n    }\n\n    handleChange = (name, is_selected) => {\n        let selected = new Map(this.state.selected.entries());\n        selected.set(name, is_selected);\n        this.setState({selected});\n        this.props.onChange(Array.from(selected.entries()));\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props === prevProps) {\n            return;\n        }\n        let selected = new Map(this.props.options.map(option => [option.name,\n                                                                 option.selected]));\n        this.setState({selected});\n    }\n\n    render() {\n        return this.props.options.map(option => (\n            <label>\n              <Checkbox name={option.value}\n                        key={option.value}\n                        checked={option.selected}\n                        onCheckboxChange={this.handleChange} />\n              {option.value}\n            </label>));\n    }\n}\n\nexport class DataList extends Component {\n    render() {\n        let items = this.props.options.map(option => <option value={option} key={option}/>);\n        return (<datalist id={this.props.id}>\n                  {items}\n                </datalist>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {filterCompiler, parseExpr} from './filter';\nimport {Checkbox, CheckboxMultiple, TextInput, Select, SelectMultiple} from './form';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst browsers = [\"chrome\", \"firefox\", \"safari\"];\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    params = new Map(Object.entries(params));\n    for (let [key, value] of defaults) {\n        if (!params.has(key)) {\n            url.searchParams.append(key, value);\n        }\n    }\n    for (let [key, value] of params) {\n        if (value === null || value === undefined) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            runSha: null,\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n            filter: null,\n            filterFunc: null,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filterFunc) => {\n        this.setState({filterFunc});\n    }\n\n    onRunChange = (runSha) => {\n        this.setState({runSha});\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let params = {aligned: \"\"};\n        if (this.state.runSha) {\n            params[\"sha\"] = this.state.runSha;\n        }\n        let runsUrl = makeWptFyiUrl(\"api/runs\", params);\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        let runSha = runs[0].full_revision_hash;\n        this.setState({wptRuns: runs, runSha});\n    }\n\n    async loadGeckoMetadata() {\n        let metadata = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-wpt-metadata-summary\",\n                                                      \"summary.json\");\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n        if (prevState.runSha !== this.state.runSha) {\n            this.setState({loading_state: LOADING_STATE.LOADING});\n            await this.loadWptRunData();\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body = [];\n        if (this.state.runSha) {\n            body.push(<section id=\"selector\" key=\"selector\">\n                        <dl>\n                          <RunInfo runSha={this.state.runSha}\n                                   onChange={this.onRunChange} />\n                          <BrowserInfo runs={this.state.wptRuns} />\n                          <BugComponentSelector onComponentChange={this.onComponentChange}\n                                                components={this.state.bugComponents}\n                                                value={this.state.currentBugComponent} />\n                          <Filter onChange={this.onFilterChange} />\n                          <TestPaths\n                            paths={paths}\n                            selectedPaths={this.state.selectedPaths}\n                            onChange={this.onPathsChange} />\n                        </dl>\n                        </section>);\n        }\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            body.push(<section id=\"details\" key=\"details\">\n                        <p>Loading…</p>\n                      </section>);\n        } else {\n            body.push(\n                <section id=\"details\" key=\"details\">\n                  <Tabs>\n                    <ResultsView label=\"Interop Comparison\"\n                                 runs={this.state.wptRuns}\n                                 paths={Array.from(this.state.selectedPaths)}\n                                 geckoMetadata={this.state.pathMetadata}\n                                 onError={this.onError}\n                                 filter={this.state.filterFunc}>\n                      <h2>Interop Comparison</h2>\n                    </ResultsView>\n                    <GeckoData label=\"Gecko Data\"\n                               data={this.state.pathMetadata}\n                               paths={Array.from(this.state.selectedPaths)}\n                               onError={this.onError}>\n                      <h2>Gecko metadata</h2>\n                      <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                      <p>Note: this data is currently not kept up to date</p>\n                    </GeckoData>\n                  </Tabs>\n                </section>);\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newSha: null,\n            runShas: []\n        };\n    }\n\n    onInputChange = (value) => {\n        this.setState({newSha: value});\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newSha);\n        this.setState({editable: false});\n    }\n\n    async componentDidMount() {\n        let url = makeWptFyiUrl(\"/api/runs\", {\"max-count\": \"100\"});\n        let runs = await fetchJson(url);\n        let browserRuns = new Map();\n        for (let run of runs) {\n            if (!browserRuns.has(run.revision)) {\n                browserRuns.set(run.revision, new Set());\n            }\n            browserRuns.get(run.revision).add(run.browser_name);\n        }\n        let runShas = [];\n        for (let run of runs) {\n            if (browserRuns.has(run.revision) && browserRuns.get(run.revision).size === 3) {\n                runShas.push(run.revision);\n            }\n            browserRuns.delete(run.revision);\n        }\n        this.setState({runShas});\n    }\n\n    render() {\n        if (!this.props.runSha && !this.state.editable) {\n            return null;\n        }\n        let url = makeWptFyiUrl(\"\", {sha: this.props.runSha});\n        return [<dt key=\"term\">wpt SHA1:</dt>,\n                this.state.editable ?\n                 (<dd key=\"value\">\n                      {this.state.runShas ?\n                       (<datalist id=\"runShasData\">\n                          {this.state.runShas.map(x => <option key={x} value={x}/>)}\n                        </datalist>) : null}\n                    <TextInput defaultValue={this.props.runSha}\n                               onChange={this.onInputChange}\n                               list=\"runShasData\"/>\n                    <button onClick={this.onUpdateClick}>\n                      Update\n                    </button>\n                  </dd>):\n                 (<dd key=\"value\">\n                    <a href={url}>{this.props.runSha.slice(0,12)}</a>\n                    &nbsp;&nbsp;\n                    <button onClick={this.onEditClick}>\n                      Edit\n                    </button>\n                  </dd>\n                 )];\n    }\n}\n\nclass BrowserInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let browsers = this.props.runs.map(run => {\n            return (<li key={run.browser_name}>\n               {capitalize(run.browser_name)} {run.browser_version} ({run.os_name})\n             </li>);\n        });\n        return [<dt key=\"term\">Browsers:</dt>,\n                (<dd key=\"value\">\n                   <ul>{browsers}</ul>\n                 </dd>)];\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return [<dt key=\"term\">Bug Component:</dt>,\n                (<dd key=\"value\">\n                   <Select\n                     onChange={this.handleChange}\n                     value={this.props.value}\n                     options={options}/>\n                 </dd>)];\n    }\n}\n\nclass Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: \"not has _geckoMetadata.bug\"},\n                                    triaged: {name: \"Triaged\", filter: \"has _geckoMetadata.bug\"},\n                                    custom: {name: \"Custom…\", filter: null}}));\n\n    constructor(props) {\n        super(props);\n        let [type, expr] = this.getType();\n        this.state = {type, expr};\n        this.afterFilterUpdate();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.type !== this.state.type ||\n            prevState.expr !== this.state.expr) {\n            this.afterFilterUpdate();\n        }\n    }\n\n    getType() {\n        // TODO: Maybe this should be in the parent\n        let [type, expr] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            let parts = urlValue.split(\":\");\n            type = parts[0];\n            expr = parts.slice(1).join(\":\");\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n            expr = null;\n        }\n        if (type !== \"custom\") {\n            expr = this.types.get(type).filter;\n        }\n        return [type, expr];\n    }\n\n    onTypeChange = (type) => {\n        if (!this.types.has(type)) {\n            return;\n        }\n        this.setState({type: type});\n        let expr;\n        if (type === \"custom\") {\n            expr = this.state.expr;\n        } else {\n            expr = this.types.get(type).filter;\n        }\n        if (expr) {\n            this.props.onChange(filterCompiler(parseExpr(expr)));\n        }\n    }\n\n    onExprChange = (expr) => {\n        let ast;\n        clearTimeout(this.timer);\n        try {\n            ast = expr ? parseExpr(expr) : null;\n        } catch (e) {\n            this.timer = setTimeout(() => {\n                //TODO: Add UI errors for things that won't compile\n                console.log(e);\n            }, 1000);\n            return;\n        }\n        this.timer = setTimeout(() => {\n            let filter;\n            try {\n                filter = ast ? filterCompiler(ast) : null;\n            } catch(e) {\n                console.error(e);\n                return;\n            }\n            this.props.onChange(filter);\n            this.setState({expr});\n        }, 1000);\n    }\n\n    afterFilterUpdate() {\n        let type = this.state.type;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n        } else if(type === \"custom\") {\n            let expr = this.state.expr;\n            urlParams.set(\"filter\", `custom:${expr}`);\n        } else {\n            urlParams.set(\"filter\", type);\n        }\n    }\n\n    render() {\n        let triageText = <p className=\"note\">\n                           Triaged status is currently derived from a bug: annotation in\nthe gecko metadata on the test file (not on subtests). In the future this will change to\ninclude external annotations accessible to wpt.fyi.\n                         </p>;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": (<div className=\"note\">\n                         <p>\n                           Custom filters are boolean expressions with logical operators\n                           &nbsp;<code>and</code>, <code>or</code>, and <code>not</code>`,\n                           equality operators <code>{\"==\"}</code>, and <code>!=</code>\n                           and custom operators <code>in</code> for text substrings\n                           and <code>has</code> for testing if a field exists.\n                         </p>\n                         <p>\n                           Available fields are <code>test</code> for the test title and\n                           <code>_geckoMetadata</code> for fields set from gecko metadata\n                           Gecko metadata fields include <code>bug</code> and\n                           <code>lsan-allowed</code>\n                         </p>\n                         <p>\n                           The <code>:</code> operator performs a default operation depending\n                           on the selected field</p>\n                         <p>\n                           Examples:\n                         </p>\n                         <ul>\n                           <li><code>historical in test</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>test:historical</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                         </ul>\n                        </div>)\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return [<dt key=\"term\">Filter:</dt>,\n                (<dd key=\"value\">\n                   <Select options={options}\n                           value={this.state.type}\n                           onChange={this.onTypeChange}/>\n                   {this.state.type === \"custom\" ? <TextInput onChange={this.onExprChange}\n                                                              defaultValue={this.state.expr}/> : null}\n                   {optionText.hasOwnProperty(this.state.type) ?\n                    optionText[this.state.type] : null}\n                 </dd>)];\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return [<dt key=\"term\">Test Paths</dt>,\n                (<dd key=\"value\">\n                   <button\n                     onClick={this.onUpdateClick}\n                     disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                     Update\n                   </button>\n                   <ul id=\"test-paths\">\n                     {listItems}\n                   </ul>\n                </dd>)];\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.defaultBrowsers = {\n            failsIn: [\"firefox\"],\n            passesIn: [\"chrome\", \"safari\"]\n        };\n        let comparison = this.getComparison();\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null,\n            passesIn: comparison.passesIn,\n            failsIn: comparison.failsIn,\n        };\n    }\n\n    getComparison() {\n        let rv = {};\n        for (let [key, value] of Object.entries(this.defaultBrowsers)) {\n            rv[key] = value.slice();\n        }\n        for (let key of Object.keys(rv)) {\n            if (urlParams.has(key)) {\n                let value = urlParams.get(key);\n                let listValue = value.split(\",\").filter(x => browsers.includes(x));\n                if (!value.length || listValue.length) {\n                    rv[key] = listValue;\n                }\n            }\n        }\n        return rv;\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.state.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.state.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => result._geckoMetadata = this.getMetadata(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    onBrowserChange = (passesIn, failsIn) => {\n        this.setState({passesIn, failsIn});\n        for (let [key, values] of [[\"passesIn\", passesIn],\n                                   [\"failsIn\", failsIn]]) {\n            values = values.sort();\n            if (!arraysEqual(values, this.defaultBrowsers[key])) {\n                urlParams.set(key, values.join(\",\"));\n            } else {\n                urlParams.delete(key);\n            }\n        }\n    }\n\n    render() {\n        let data;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n           data = (<div>\n                      <p>Loading…</p>\n                    </div>);\n        } else if (this.state.results === null) {\n            data = (<div>\n                      <p>Load failed</p>\n                    </div>);\n        } else if (!this.state.results.results.length) {\n            data = (<div>\n                      <p>No results</p>\n                    </div>);\n        } else {\n            let results = this.state.filteredResults ? this.state.filteredResults : [];\n            let testItems = results.map(result => (<TestItem\n                                                     failsIn={this.state.failsIn}\n                                                     passesIn={this.state.passesIn}\n                                                     runs={this.props.runs}\n                                                     result={result}\n                                                     key={result.test}\n                                                     geckoMetadata={result.test._geckoMetadata || new Map()}\n                                                     onError={this.props.onError}/>));\n            testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n            data = [(<p key=\"desc\">{results.length} top-level tests with\n                       &nbsp;{results\n                              .map(x => x.legacy_status[0].total)\n                              .reduce((x,y) => x+y, 0)} subtests</p>),\n                    <ul key=\"data\">{testItems}</ul>];\n        }\n        return (<div>\n                  {this.props.children}\n                  <ResultsViewSummary failsIn={this.state.failsIn}\n                                      passesIn={this.state.passesIn}\n                                      onChange={this.onBrowserChange}/>\n                  {data}\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({}, {});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps, prevState);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps, prevState) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.state.failsIn === prevState.failsIn &&\n            this.state.passesIn === prevState.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass ResultsViewSummary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newPassesIn: this.props.passesIn,\n            newFailsIn: this.props.failsIn,\n        };\n    }\n\n    joinList(items) {\n        if (!items.length) {\n            return \"\";\n        }\n        if (items.length === 1) {\n            return items[0];\n        }\n        let commaSeparated = items.slice(0, items.length - 1).join(\", \");\n        return `${commaSeparated}, and ${items[items.length - 1]}`;\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onSelectChange = (data, type) => {\n        let key;\n        let state = {};\n        if (type === \"passesIn\") {\n            key = \"newPassesIn\";\n        } else if (type === \"failsIn\") {\n            key = \"newFailsIn\";\n        } else {\n            console.error(`Unknown key ${type}`);\n        }\n        state[key] = data;\n        this.setState(state);\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newPassesIn, this.state.newFailsIn);\n        this.setState({editable: false});\n    }\n\n    render() {\n        if (!this.state.editable) {\n            let text;\n            if (this.props.passesIn.length && this.props.failsIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}\nbut not in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            } else if (this.props.passesIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}`;\n            } else {\n                text = `Tests that don't pass in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            }\n            return (<p>\n                      {text}\n                      &nbsp;\n                      <button onClick={this.onEditClick}>\n                        Edit\n                      </button>\n                    </p>);\n        } else {\n            let passInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.passesIn.includes(x)\n            };});\n            let failInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.failsIn.includes(x)\n            };});\n            return (<p>Tests that\n                      &nbsp;<label>pass in&nbsp;\n                        <CheckboxMultiple\n                          onChange={(data) => this.onSelectChange(data, \"passesIn\")}\n                          options={passInOptions}/>\n                      </label>\n                      &nbsp;but\n                      <label>\n                        &nbsp;not in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"failsIn\")}\n                          options={failInOptions}/>\n                      </label>\n                      &nbsp;\n                      <button\n                        onClick={this.onUpdateClick}\n                        disabled={this.state.newPassesIn.length === 0 && this.state.newFailsIn.length === 0}>\n                        Update\n                      </button>\n                    </p>);\n        }\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = {unconditional: new Map(), conditional: new Map()};\n        let lsan = {unconditional: new Map(), conditional: new Map()};\n        let crashes = {unconditional: new Map(), conditional: new Map()};\n        let set = (key, data, dest, mapFn) => {\n            let destKey;\n            if (!data || !data.length) {\n                return;\n            }\n            destKey = (data.length === 1 && data[0][0] == null) ? \"unconditional\": \"conditional\";\n            if (mapFn) {\n                data = data.map(mapFn);\n            }\n            dest[destKey].set(key, data);\n        };\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            set(dir, dirData.disabled, disabled);\n            set(dir, dirData['lsan-allowed'], lsan);\n            set(dir, dirData.expected_CRASH, crashes, cond => [cond, null]);\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                set(testKey, testData.disabled, disabled);\n                set(testKey, testData.expected_CRASH, crashes, cond => [cond, null]);\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    set(subtestKey, subtestData.disabled, disabled);\n                    set(subtestKey, subtestData.expected_CRASH, crashes, cond => [cond, null]);\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        if (!this.props.data) {\n            return <p>Loading</p>;\n        }\n        let byType = this.groupData();\n        if (byType === null ||\n            !Object.values(byType).some(typeValues => Object.values(typeValues).some(x => x.size > 0))) {\n            return (<section>\n                      <h2>Gecko metadata</h2>\n                      <p>None</p>\n                      </section>);\n        }\n        console.log(byType);\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <GeckoDataSection\n                    key=\"crashes\"\n                    data={byType.crashes}\n                    render={value => null}\n                    title=\"Crashes\"\n                    desc=\"tests crash\" />\n                  <GeckoDataSection\n                    key=\"disabled\"\n                    data={byType.disabled}\n                    render={value => <MaybeBugLink value={value} />}\n                    title=\"Disabled\"\n                    desc=\"tests are disabled\" />\n                  <GeckoDataSection\n                    key=\"lsan\"\n                    data={byType.lsan}\n                    render={value => <LsanListValue value={value} />}\n                    title=\"LSAN Failures\"\n                    desc=\"directories have LSAN failures\"/>\n                </section>);\n    }\n}\n\n\nclass GeckoDataSection extends Component {\n    render() {\n        let {conditional, unconditional} = this.props.data;\n        if (!conditional.size && !unconditional.size) {\n            return null;\n        }\n        let count = 0;\n        let items = [];\n        for (let [type, typeData] of [[\"In all configurations\", unconditional],\n                                      [\"In some configurations\", conditional]]) {\n            if (!typeData.size) {\n                continue;\n            }\n            items.push(<h4 key={type}>{type}</h4>);\n            for (let [test, values] of iterMapSorted(typeData)) {\n                count++;\n                items.push(<GeckoMetadataLine\n                             key={test}\n                             title={test}\n                             values={values}\n                             render={this.props.render}/>);\n            }\n        }\n        return (<section>\n                  <h3>{this.props.title}</h3>\n                  <p>{count} {this.props.desc}</p>\n                  <ul>{items}</ul>\n                </section>);\n    }\n\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        console.log(this.props.value);\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}