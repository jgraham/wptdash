{"version":3,"sources":["utils.js","filter.js","form.js","App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","tokenize","FilterError","Error","handlers","and","data","args","child","push","filterCompiler","operators","apply","or","==","not","_ref","Object","slicedToArray","in","_ref3","_len","arguments","_key","ctx","x","_len2","_key2","some","_ref5","_ref6","arg","_ref7","_ref8","lhs","rhs","ctxValue","getValue","includes","keyParts","split","target","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","part","Map","input","console","error","op","hasOwnProperty","concat","ParseError","space","term","initialLength","m","skip","token","match","slice","abrupt","filter_marked","operatorTokens","Set","unaryOperators","precedenceGroups","operatorPrecedence","_step4","_iterator4","_iteratorNormalCompletion4","filter_ref12","filter_ref10","groupIdx","group","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","set","operatorAliases","entries","!","defaultOperator","test","Node","name","classCallCheck","obj","children","to_object","UnaryOperatorNode","_this","possibleConstructorReturn","getPrototypeOf","call","operand","BinaryOperatorNode","_this2","ValueNode","createOperatorNode","Parser","operands","tokens","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","top","pop","precedence","operator","_ref11","transformDefaultOperator","parseExpr","expr","parse","Checkbox","_Component","props","handleChange","event","setState","checked","onCheckboxChange","state","inherits","createClass","react_default","createElement","type","onChange","Component","TextInput","_Component2","_getPrototypeOf2","defaultValue","Select","_Component3","_getPrototypeOf3","_this3","selectItems","options","option","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","makeWptFyiUrl","path","params","url","URL","defaults","_ref2","searchParams","append","_arr","_loop","_i2","forEach","FetchError","resp","message","status","statusText","fetchJson","_callee17","_context17","fetch","sent","ok","json","anyRe","workerRe","testToPath","pathname","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","_update","delete","makeError","id","App","onError","errors","onDismissError","idx","findIndex","splice","onFilterChange","filterFunc","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","filter","retry","redirect","indexName","artifactName","_callee2","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","runsUrl","aligned","asyncToGenerator","mark","_callee5","_context5","_this4","loadWptRunData","_callee7","_context7","_this5","loadGeckoMetadata","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","Promise","all","pathRe","makeRe","notPaths","values","notPathRe","allMetadata","_arr2","_i3","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","_stack$pop2","basePath","found","_arr3","_i4","filename","relPath","prevProps","prevState","filterGeckoMetadata","body","App_RunInfo","App_BugComponentSelector","App_Filter","App_TestPaths","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","App_ErrorArea","ErrorArea","onDismiss","_this6","_this7","errorLines","_loop2","App_ErrorLine","className","ErrorLine","_this8","_this$props$error","extraControls","onClick","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","_this9","form_Select","Filter","_this10","types","none","untriaged","triaged","custom","onTypeChange","onExprChange","ast","clearTimeout","timer","e","setTimeout","log","_this10$getType","getType","_this10$getType2","afterFilterUpdate","urlValue","parts","triageText","optionText","_ref9","_ref10","form_TextInput","TestPaths","_this11","add","onUpdateClick","_this12","listItems","form_Checkbox","disabled","ResultsView","_this13","results","filteredResults","query","run_ids","topAndClause","_didIteratorError4","_iteratorError4","browser","browser_name","orClause","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pattern","searchQuery","buildQuery","method","JSON","stringify","headers","Content-Type","_context11","_retry","_callee10","_context10","_this14","fetchResults","result","_geckoMetadata","getMetadata","dirParts","testName","dirPath","copyMeta","src","_arr4","_i5","_ref13","_ref12","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr5","_i6","_ref16","_ref15","_this15","_this16","testItems","App_TestItem","legacy_status","total","reduce","y","fetchIfPossible","updateFilteredResults","TreeRow","_this17","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this18","loaded","_this19","resultBySubtest","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref21","_ref18","browserResults","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","subtests","subtest","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","resultByBrowser","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","filteredResultBySubtest","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop3","_ref19","_ref20","_iterator11","rv","resultData","browsers","promises","_iterator14","_iteratorNormalCompletion14","_step14","summaryUrl","results_url","promise","then","success","catch","resolved","_iterator15","_iteratorNormalCompletion15","_step15","_ref24","_ref23","processResultData","_this20","headerRow","subtestMetadata","resultRows","_ref25","_ref26","App_ResultRow","App_MetaSummary","MetaSummary","items","_this21","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this22","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr6","_i7","_ref29","_ref28","dir","dirData","expected_CRASH","cond","_arr7","_i8","_ref32","_ref31","testData","testKey","_arr8","_i9","_ref35","_ref34","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref38","_ref37","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref41","_ref40","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref44","_ref43","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref47","_ref46","condition","conditionStr","valueList","MaybeBugLink","_arr9","_i10","LsanListValue","frames","Tabs","_this23","handleClickTab","activeTab","_this24","tabItems","App_Tab","active","activeTabContent","Tab","_this25","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3275565.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    \"==\": (data)  => {\n        return operators[\"==\"](data);\n    },\n\n    not: ([data]) => {\n        return operators.not(filterCompiler(data));\n    },\n\n    in: (data) => {\n        return operators.in(data);\n    },\n\n    has: ([data]) => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    \"==\": ([lhs, rhs]) => {\n        return lhs === rhs;\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    in: ([lhs, rhs]) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, rhs);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(lhs);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(input);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        console.error(input);\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\nclass ParseError extends Error{};\n\nfunction* tokenize(input) {\n    let space = /\\s*/;\n    let term = /\\w(?:\\w|\\d|\\.|_|\\-|\\+)*|\\d+|==|!=|\\(|\\)|:|\".*?[^\\\\]\"|'.*?[^\\\\]'/;\n\n    let initialLength = input.length;\n\n    while (input.length) {\n        // Skip spaces\n        let m = input.match(space);\n        if (m[0].length) {\n            let skip = m[0].length;\n            input = input.slice(skip);\n            if (!input.length) {\n                break;\n            }\n        }\n\n        //Match the next token\n        m = input.match(term);\n        if (!m) {\n            throw new ParseError(`Invalid input at character ${initialLength - input.length}`);\n        }\n        let token = m[0];\n        yield token;\n        input = input.slice(token.length);\n    }\n}\n\nconst operatorTokens = new Set([\"==\", \"!=\", \"in\", \"and\", \"or\", \"!\", \"not\", \":\", \"has\"]);\nconst unaryOperators = new Set([\"!\", \"not\", \"has\"]);\n\nconst precedenceGroups = [[\":\"], [\"in\", \"==\", \"!=\", \"has\"], [\"not\", \"!\"], [\"and\"], [\"or\"]];\nconst operatorPrecedence = new Map();\n\nfor (let [groupIdx, group] of precedenceGroups.map((x, i) => [i, x])) {\n    for (let op of group) {\n        operatorPrecedence.set(op, precedenceGroups.length - groupIdx);\n    }\n}\n\nconst operatorAliases = new Map(Object.entries({\"!\": \"not\"}));\n\nconst defaultOperator = new Map(Object.entries({test: \"in\"}));\n\n\nclass Node {\n    constructor(name) {\n        this.name = name;\n    }\n\n    to_object() {\n        let obj = {};\n        obj[this.name] = this.children().map(x => x.to_object());\n        return obj;\n    }\n}\n\nclass UnaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || !unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.operand = null;\n    }\n\n    children() {\n        return [this.operand];\n    }\n}\n\nclass BinaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.lhs = null;\n        this.rhs = null;\n    }\n\n    children() {\n        return [this.lhs, this.rhs];\n    }\n}\n\nclass ValueNode extends Node {\n    constructor(name) {\n        if (name[0] === \"'\" || name[0] === '\"') {\n            name = name.slice(1, name.length - 1);\n        }\n        super(name);\n    }\n    to_object() {\n        return this.name;\n    }\n}\n\nfunction createOperatorNode(token) {\n    if (unaryOperators.has(token)) {\n        return new UnaryOperatorNode(token);\n    }\n    return new BinaryOperatorNode(token);\n}\n\nfunction transformDefaultOperator(operator) {\n    // The default operator creates a different kind of relation depending on the arguments\n    let op = \"==\";\n    if (defaultOperator.has(operator.lhs.name)) {\n        op = defaultOperator.get(operator.lhs.name);\n    }\n    operator.name = op;\n    if (op === \"in\") {\n        [operator.lhs, operator.rhs] = [operator.rhs, operator.lhs];\n    }\n    return operator;\n}\n\nclass Parser {\n    constructor() {\n        this.operators = [];\n        this.operands = [];\n    }\n\n    top() {\n        return this.operators.length ? this.operators[this.operators.length - 1] : null;\n    }\n\n    parse(tokens) {\n        for (let token of tokens) {\n            if (token === \"(\") {\n                this.operators.push(token);\n            } else if (token === \")\") {\n                while(this.top() !== null && this.top() !== \"(\") {\n                    this.apply();\n                }\n                if (!this.operators.length) {\n                    throw new ParseError(\"Mismatched parens\");\n                }\n                this.operators.pop();\n            } else if (operatorTokens.has(token)) {\n                while (this.top() !== null &&\n                       this.top() !== \")\" &&\n                       this.precedence(this.top().name) >= this.precedence(token)) {\n                    this.apply();\n                }\n                this.operators.push(createOperatorNode(token));\n            } else {\n                this.operands.push(new ValueNode(token));\n            }\n        }\n        while (this.operators.length) {\n            this.apply();\n        }\n        if (this.operands.length !== 1) {\n            throw new ParseError(\"Operands remaining at end of input\");\n        }\n        return this.operands[0];\n    }\n\n    precedence(token) {\n        return operatorPrecedence.get(token);\n    }\n\n    apply() {\n        let operator = this.operators.pop();\n        if (unaryOperators.has(operator.name)) {\n            let operand = this.operands.pop();\n            if (!operand) {\n                throw new Error();\n            }\n            operator.operand = operand;\n        } else {\n            let rhs = this.operands.pop();\n            let lhs = this.operands.pop();\n            if (!lhs || !rhs) {\n                throw new Error();\n            }\n            operator.lhs = lhs;\n            operator.rhs = rhs;\n            if (operator.name === \":\") {\n                operator = transformDefaultOperator(operator);\n            }\n        }\n        this.operands.push(operator);\n    }\n}\n\n\nexport function parseExpr(expr) {\n    let parser = new Parser();\n    return parser.parse(tokenize(expr)).to_object();\n}\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                name={this.props.name}\n                onChange={this.handleChange}\n                defaultValue={this.props.defaultValue}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {filterCompiler, parseExpr} from './filter';\nimport {Checkbox, TextInput, Select} from './form';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n            filter: null,\n            filterFunc: null,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filterFunc) => {\n        this.setState({filterFunc});\n      }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        this.setState({wptRuns: runs});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let metadata = await this.fetchData(`https://queue.taskcluster.net/v1/task/YtpxIfHTR5CKgd4EfpkAQg/runs/0/artifacts/public/summary.json`,\n                                            async () => this.loadGeckoMetadata());\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            body = <p>Loading…</p>;\n        } else {\n            body = [<section id=\"selector\" key=\"selector\">\n                      <RunInfo runs={this.state.wptRuns}/>\n                      <BugComponentSelector onComponentChange={this.onComponentChange}\n                                            components={this.state.bugComponents}\n                                            value={this.state.currentBugComponent} />\n                      <Filter onChange={this.onFilterChange} />\n                      <TestPaths\n                        paths={paths}\n                        selectedPaths={this.state.selectedPaths}\n                        onChange={this.onPathsChange} />\n                    </section>,\n                    <section id=\"details\" key=\"details\">\n                      <Tabs>\n                        <ResultsView label=\"Firefox-only Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[\"safari\", \"chrome\"]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}\n                                     filter={this.state.filterFunc}>\n                          <h2>Firefox-only Failures</h2>\n                          <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                        </ResultsView>\n                        <ResultsView label=\"All Firefox Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}\n                                     filter={this.state.filterFunc}>\n                          <h2>All Firefox Failures</h2>\n                          <p>Tests that fail in Firefox</p>\n                        </ResultsView>\n                        <GeckoData label=\"Gecko Data\"\n                                   data={this.state.pathMetadata}\n                                   paths={Array.from(this.state.selectedPaths)}\n                                   onError={this.onError}>\n                          <h2>Gecko metadata</h2>\n                          <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                          <p>Note: this data is currently not kept up to date</p>\n                        </GeckoData>\n                      </Tabs>\n                    </section>];\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <Select\n                    onChange={this.handleChange}\n                    value={this.props.value}\n                    options={options}/>\n                </section>);\n    }\n}\n\nclass Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: \"not has _geckoMetadata.bug\"},\n                                    triaged: {name: \"Triaged\", filter: \"has _geckoMetadata.bug\"},\n                                    custom: {name: \"Custom…\", filter: null}}));\n\n    constructor(props) {\n        super(props);\n        let [type, expr] = this.getType();\n        this.state = {type, expr};\n        this.afterFilterUpdate();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.type !== this.state.type ||\n            prevState.expr !== this.state.expr) {\n            this.afterFilterUpdate();\n        }\n    }\n\n    getType() {\n        // TODO: Maybe this should be in the parent\n        let [type, expr] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            let parts = urlValue.split(\":\");\n            type = parts[0];\n            expr = parts.slice(1).join(\":\");\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n            expr = null;\n        }\n        if (type !== \"custom\") {\n            expr = this.types.get(type).filter;\n        }\n        return [type, expr];\n    }\n\n    onTypeChange = (type) => {\n        if (!this.types.has(type)) {\n            return;\n        }\n        this.setState({type: type});\n        let expr;\n        if (type === \"custom\") {\n            expr = this.state.expr;\n        } else {\n            expr = this.types.get(type).filter;\n        }\n        if (expr) {\n            this.props.onChange(filterCompiler(parseExpr(expr)));\n        }\n    }\n\n    onExprChange = (expr) => {\n        let ast;\n        clearTimeout(this.timer);\n        try {\n            ast = expr ? parseExpr(expr) : null;\n        } catch (e) {\n            this.timer = setTimeout(() => {\n                //TODO: Add UI errors for things that won't compile\n                console.log(e);\n            }, 1000);\n            return;\n        }\n        this.timer = setTimeout(() => {\n            let filter;\n            try {\n                filter = ast ? filterCompiler(ast) : null;\n            } catch(e) {\n                console.error(e);\n                return;\n            }\n            this.props.onChange(filter);\n            this.setState({expr});\n        }, 1000);\n    }\n\n    afterFilterUpdate() {\n        let type = this.state.type;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n        } else if(type === \"custom\") {\n            let expr = this.state.expr;\n            urlParams.set(\"filter\", `custom:${expr}`);\n        } else {\n            urlParams.set(\"filter\", type);\n        }\n    }\n\n    render() {\n        let triageText = <p className=\"note\">\n                           Triaged status is currently derived from a bug: annotation in\nthe gecko metadata on the test file (not on subtests). In the future this will change to\ninclude external annotations accessible to wpt.fyi.\n                         </p>;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": (<div className=\"note\">\n                         <p>\n                           Custom filters are boolean expressions with logical operators\n                           <code>and</code>, <code>or</code>, and <code>not</code>`,\n                           equality operators <code>{\"==\"}</code>, and <code>!=</code>\n                           and custom operators <code>in</code> for text substrings\n                           and <code>has</code> for testing if a field exists.\n                         </p>\n                         <p>\n                           Available fields are <code>test</code> for the test title and\n                           <code>_geckoMetadata</code> for fields set from gecko metadata\n                           Gecko metadata fields include <code>bug</code> and\n                           <code>lsan-allowed</code>\n                         </p>\n                         <p>\n                           The <code>:</code> operator performs a default operation depending\n                           on the selected field</p>\n                         <p>\n                           Examples:\n                         </p>\n                         <ul>\n                           <li><code>historical in test</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>test:historical</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                         </ul>\n                        </div>)\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return (<section>\n                  <label>Filter:</label>\n                  <Select options={options}\n                          value={this.state.type}\n                          onChange={this.onTypeChange}/>\n                  {this.state.type === \"custom\" ? <TextInput onChange={this.onExprChange}\n                                                             defaultValue={this.state.expr}/> : null}\n                  {optionText.hasOwnProperty(this.state.type) ?\n                   optionText[this.state.type] : null}\n                </section>);\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => result._geckoMetadata = this.getMetadata(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    render() {\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let results = this.state.filteredResults ? this.state.filteredResults : [];\n        let testItems = results.map(result => (<TestItem\n                                                 failsIn={this.props.failsIn}\n                                                 passesIn={this.props.passesIn}\n                                                 runs={this.props.runs}\n                                                 result={result}\n                                                 key={result.test}\n                                                 geckoMetadata={result.test._geckoMetadata || new Map()}\n                                                 onError={this.props.onError}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{results.length} top-level tests with\n                    &nbsp;{results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.props.failsIn === prevProps.failsIn &&\n            this.props.passesIn === prevProps.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}