{"version":3,"sources":["utils.js","filter.js","form.js","App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","_keys","key","_context2","from","sort","get","_marked2","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","tokenize","FilterError","Error","handlers","and","data","args","child","push","filterCompiler","operators","apply","or","==","not","_ref","Object","slicedToArray","in","_ref3","_len","arguments","_key","ctx","x","_len2","_key2","some","_ref5","_ref6","arg","_ref7","_ref8","lhs","rhs","ctxValue","getValue","includes","keyParts","split","target","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","part","Map","input","console","error","op","hasOwnProperty","concat","ParseError","space","term","initialLength","m","skip","token","match","slice","abrupt","filter_marked","operatorTokens","Set","unaryOperators","precedenceGroups","operatorPrecedence","filter_step4","filter_iterator4","filter_iteratorNormalCompletion4","_ref12","filter_ref10","groupIdx","group","filter_iteratorNormalCompletion6","filter_didIteratorError6","filter_iteratorError6","filter_step6","filter_iterator6","set","operatorAliases","entries","!","defaultOperator","test","Node","name","classCallCheck","this","obj","children","to_object","UnaryOperatorNode","_this","possibleConstructorReturn","getPrototypeOf","call","operand","BinaryOperatorNode","_this2","ValueNode","createOperatorNode","Parser","operands","tokens","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","top","pop","precedence","operator","_ref11","transformDefaultOperator","parseExpr","expr","parse","Checkbox","_Component","props","handleChange","event","setState","checked","onCheckboxChange","state","inherits","createClass","react_default","createElement","type","onChange","Component","TextInput","_Component2","_getPrototypeOf2","defaultValue","list","Select","_Component3","_getPrototypeOf3","_this3","selectItems","options","option","SelectMultiple","_Component4","_getPrototypeOf4","_this4","_len3","_key3","selectedOptions","selected","multiple","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","browsers","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","makeWptFyiUrl","path","params","url","URL","_defaults","_ref2","searchParams","append","_loop","_ref4","forEach","capitalize","str","toUpperCase","FetchError","resp","message","status","statusText","fetchJson","_callee18","_context18","fetch","sent","ok","json","anyRe","workerRe","testToPath","pathname","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","_update","delete","makeError","id","App","onError","errors","onDismissError","idx","findIndex","splice","onFilterChange","filterFunc","onRunChange","runSha","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","filter","retry","redirect","indexName","artifactName","_callee2","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","aligned","runsUrl","asyncToGenerator","mark","_callee5","_context5","loadWptRunData","full_revision_hash","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","loadGeckoMetadata","Promise","all","pathRe","makeRe","notPaths","values","notPathRe","allMetadata","_i2","_Object$keys","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","_stack$pop2","basePath","found","_i3","_Object$keys2","filename","relPath","prevProps","prevState","filterGeckoMetadata","body","App_RunInfo","App_BrowserInfo","App_BugComponentSelector","App_Filter","App_TestPaths","App_Tabs","App_ResultsView","label","App_GeckoData","App_ErrorArea","ErrorArea","onDismiss","_this5","_this6","errorLines","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop2","_ref9","App_ErrorLine","_iterator4","className","ErrorLine","_this7","_this$props$error","extraControls","onClick","RunInfo","_this8","onInputChange","newSha","onEditClick","editable","onUpdateClick","runShas","max-count","browserRuns","revision","add","browser_name","_iterator6","_iteratorNormalCompletion6","_step6","sha","form_TextInput","BrowserInfo","browser_version","os_name","BugComponentSelector","_this9","form_Select","Filter","_this10","types","none","untriaged","triaged","custom","onTypeChange","onExprChange","ast","clearTimeout","timer","e","setTimeout","log","_this10$getType","getType","_this10$getType2","afterFilterUpdate","urlValue","parts","triageText","optionText","_ref10","TestPaths","_this11","_this12","listItems","form_Checkbox","disabled","ResultsView","_this13","onBrowserChange","passesIn","failsIn","_i4","_arr","_ref14","_ref13","defaultBrowsers","comparison","getComparison","results","filteredResults","rv","_i5","_Object$entries","_ref17","_ref16","_i6","_Object$keys3","listValue","query","run_ids","topAndClause","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","browser","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","orClause","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","pattern","searchQuery","buildQuery","method","JSON","stringify","headers","Content-Type","_context12","_retry","_callee11","_context11","_this14","fetchResults","result","_geckoMetadata","getMetadata","dirParts","testName","dirPath","copyMeta","src","_i7","_Object$entries2","_ref20","_ref19","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_i8","_Object$entries3","_ref23","_ref22","_this15","_this16","testItems","App_TestItem","legacy_status","total","reduce","y","App_ResultsViewSummary","fetchIfPossible","updateFilteredResults","ResultsViewSummary","_this17","onSelectChange","newPassesIn","newFailsIn","items","commaSeparated","text","_this18","passInOptions","failInOptions","form_SelectMultiple","joinList","TreeRow","_this19","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this20","loaded","_this21","resultBySubtest","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_ref28","_ref25","browserResults","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","subtests","subtest","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","resultByBrowser","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","filteredResultBySubtest","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_loop3","_ref26","_ref27","_iterator14","resultData","promises","_iterator17","_iteratorNormalCompletion17","_step17","summaryUrl","results_url","promise","then","success","catch","resolved","_iterator18","_iteratorNormalCompletion18","_step18","_ref31","_ref30","processResultData","_this22","headerRow","subtestMetadata","resultRows","_ref32","_ref33","App_ResultRow","App_MetaSummary","MetaSummary","_this23","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this24","cells","App_ResultCell","ResultCell","GeckoData","unconditional","conditional","lsan","crashes","dest","mapFn","destKey","_i9","_Object$entries4","_ref36","_ref35","dir","dirData","expected_CRASH","cond","_i10","_Object$entries5","_ref39","_ref38","testData","testKey","_i11","_Object$entries6","_ref42","_ref41","subtestData","subtestKey","byType","groupData","typeValues","App_GeckoDataSection","desc","App_LsanListValue","GeckoDataSection","_this$props$data","_i12","_arr2","_ref45","_ref44","typeData","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref48","_ref47","GeckoMetadataLine","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_ref51","_ref50","condition","conditionStr","valueList","MaybeBugLink","_i13","_arr3","LsanListValue","frames","Tabs","_this25","handleClickTab","activeTab","_this26","tabItems","App_Tab","active","activeTabContent","Tab","_this27","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba91dbd0.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    \"==\": (data)  => {\n        return operators[\"==\"](data);\n    },\n\n    not: ([data]) => {\n        return operators.not(filterCompiler(data));\n    },\n\n    in: (data) => {\n        return operators.in(data);\n    },\n\n    has: ([data]) => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    \"==\": ([lhs, rhs]) => {\n        return lhs === rhs;\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    in: ([lhs, rhs]) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, rhs);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(lhs);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(input);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        console.error(input);\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\nclass ParseError extends Error{};\n\nfunction* tokenize(input) {\n    let space = /\\s*/;\n    let term = /\\w(?:\\w|\\d|\\.|_|-|\\+|\\/)*|\\d+|==|!=|\\(|\\)|:|\".*?[^\\\\]\"|'.*?[^\\\\]'/;\n\n    let initialLength = input.length;\n\n    while (input.length) {\n        // Skip spaces\n        let m = input.match(space);\n        if (m[0].length) {\n            let skip = m[0].length;\n            input = input.slice(skip);\n            if (!input.length) {\n                break;\n            }\n        }\n\n        //Match the next token\n        m = input.match(term);\n        if (!m) {\n            throw new ParseError(`Invalid input at character ${initialLength - input.length}`);\n        }\n        let token = m[0];\n        yield token;\n        input = input.slice(token.length);\n    }\n}\n\nconst operatorTokens = new Set([\"==\", \"!=\", \"in\", \"and\", \"or\", \"!\", \"not\", \":\", \"has\"]);\nconst unaryOperators = new Set([\"!\", \"not\", \"has\"]);\n\nconst precedenceGroups = [[\":\"], [\"in\", \"==\", \"!=\", \"has\"], [\"not\", \"!\"], [\"and\"], [\"or\"]];\nconst operatorPrecedence = new Map();\n\nfor (let [groupIdx, group] of precedenceGroups.map((x, i) => [i, x])) {\n    for (let op of group) {\n        operatorPrecedence.set(op, precedenceGroups.length - groupIdx);\n    }\n}\n\nconst operatorAliases = new Map(Object.entries({\"!\": \"not\"}));\n\nconst defaultOperator = new Map(Object.entries({test: \"in\"}));\n\n\nclass Node {\n    constructor(name) {\n        this.name = name;\n    }\n\n    to_object() {\n        let obj = {};\n        obj[this.name] = this.children().map(x => x.to_object());\n        return obj;\n    }\n}\n\nclass UnaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || !unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.operand = null;\n    }\n\n    children() {\n        return [this.operand];\n    }\n}\n\nclass BinaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.lhs = null;\n        this.rhs = null;\n    }\n\n    children() {\n        return [this.lhs, this.rhs];\n    }\n}\n\nclass ValueNode extends Node {\n    constructor(name) {\n        if (name[0] === \"'\" || name[0] === '\"') {\n            name = name.slice(1, name.length - 1);\n        }\n        super(name);\n    }\n    to_object() {\n        return this.name;\n    }\n}\n\nfunction createOperatorNode(token) {\n    if (unaryOperators.has(token)) {\n        return new UnaryOperatorNode(token);\n    }\n    return new BinaryOperatorNode(token);\n}\n\nfunction transformDefaultOperator(operator) {\n    // The default operator creates a different kind of relation depending on the arguments\n    let op = \"==\";\n    if (defaultOperator.has(operator.lhs.name)) {\n        op = defaultOperator.get(operator.lhs.name);\n    }\n    operator.name = op;\n    if (op === \"in\") {\n        [operator.lhs, operator.rhs] = [operator.rhs, operator.lhs];\n    }\n    return operator;\n}\n\nclass Parser {\n    constructor() {\n        this.operators = [];\n        this.operands = [];\n    }\n\n    top() {\n        return this.operators.length ? this.operators[this.operators.length - 1] : null;\n    }\n\n    parse(tokens) {\n        for (let token of tokens) {\n            if (token === \"(\") {\n                this.operators.push(token);\n            } else if (token === \")\") {\n                while(this.top() !== null && this.top() !== \"(\") {\n                    this.apply();\n                }\n                if (!this.operators.length) {\n                    throw new ParseError(\"Mismatched parens\");\n                }\n                this.operators.pop();\n            } else if (operatorTokens.has(token)) {\n                while (this.top() !== null &&\n                       this.top() !== \")\" &&\n                       this.precedence(this.top().name) >= this.precedence(token)) {\n                    this.apply();\n                }\n                this.operators.push(createOperatorNode(token));\n            } else {\n                this.operands.push(new ValueNode(token));\n            }\n        }\n        while (this.operators.length) {\n            this.apply();\n        }\n        if (this.operands.length !== 1) {\n            throw new ParseError(\"Operands remaining at end of input\");\n        }\n        return this.operands[0];\n    }\n\n    precedence(token) {\n        return operatorPrecedence.get(token);\n    }\n\n    apply() {\n        let operator = this.operators.pop();\n        if (unaryOperators.has(operator.name)) {\n            let operand = this.operands.pop();\n            if (!operand) {\n                throw new Error();\n            }\n            operator.operand = operand;\n        } else {\n            let rhs = this.operands.pop();\n            let lhs = this.operands.pop();\n            if (!lhs || !rhs) {\n                throw new Error();\n            }\n            operator.lhs = lhs;\n            operator.rhs = rhs;\n            if (operator.name === \":\") {\n                operator = transformDefaultOperator(operator);\n            }\n        }\n        this.operands.push(operator);\n    }\n}\n\n\nexport function parseExpr(expr) {\n    let parser = new Parser();\n    return parser.parse(tokenize(expr)).to_object();\n}\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  onChange={this.handleChange}\n                  defaultValue={this.props.defaultValue}\n                  list={this.props.list}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class SelectMultiple extends Component {\n    handleChange = (event) => {\n        let selectedOptions = event.target.selectedOptions;\n        this.props.onChange([].map.call(selectedOptions, x => x.value));\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value} selected={option.selected}>\n                                                 {option.name}\n                                                 </option>);\n        return (<select\n                  size=\"3\"\n                  multiple\n                  onChange={this.handleChange}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class DataList extends Component {\n    render() {\n        let items = this.props.options.map(option => <option value={option} key={option}/>);\n        return (<datalist id={this.props.id}>\n                  {items}\n                </datalist>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {filterCompiler, parseExpr} from './filter';\nimport {Checkbox, TextInput, Select, SelectMultiple} from './form';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst browsers = [\"chrome\", \"firefox\", \"safari\"];\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    params = new Map(Object.entries(params));\n    for (let [key, value] of defaults) {\n        if (!params.has(key)) {\n            url.searchParams.append(key, value);\n        }\n    }\n    for (let [key, value] of params) {\n        if (value === null || value === undefined) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    if (str) {\n        return str && str[0].toUpperCase() + str.slice(1);\n    } else {\n        return \"\";\n    }\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            runSha: null,\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n            filter: null,\n            filterFunc: null,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filterFunc) => {\n        this.setState({filterFunc});\n    }\n\n    onRunChange = (runSha) => {\n        this.setState({runSha});\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let params = {aligned: \"\"};\n        if (this.state.runSha) {\n            params[\"sha\"] = this.state.runSha;\n        }\n        let runsUrl = makeWptFyiUrl(\"api/runs\", params);\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        let runSha = runs[0].full_revision_hash;\n        this.setState({wptRuns: runs, runSha});\n    }\n\n    async loadGeckoMetadata() {\n        let metadata = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-wpt-metadata-summary\",\n                                                      \"summary.json\");\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n        if (prevState.runSha !== this.state.runSha) {\n            this.setState({loading_state: LOADING_STATE.LOADING});\n            await this.loadWptRunData();\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body = [];\n        if (this.state.runSha) {\n            body.push(<section id=\"selector\" key=\"selector\">\n                        <dl>\n                          <RunInfo runSha={this.state.runSha}\n                                   onChange={this.onRunChange} />\n                          <BrowserInfo runs={this.state.wptRuns} />\n                          <BugComponentSelector onComponentChange={this.onComponentChange}\n                                                components={this.state.bugComponents}\n                                                value={this.state.currentBugComponent} />\n                          <Filter onChange={this.onFilterChange} />\n                          <TestPaths\n                            paths={paths}\n                            selectedPaths={this.state.selectedPaths}\n                            onChange={this.onPathsChange} />\n                        </dl>\n                        </section>);\n        }\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            body.push(<section id=\"details\" key=\"details\">\n                        <p>Loading…</p>\n                      </section>);\n        } else {\n            body.push(\n                <section id=\"details\" key=\"details\">\n                  <Tabs>\n                    <ResultsView label=\"Interop Comparison\"\n                                 runs={this.state.wptRuns}\n                                 paths={Array.from(this.state.selectedPaths)}\n                                 geckoMetadata={this.state.pathMetadata}\n                                 onError={this.onError}\n                                 filter={this.state.filterFunc}>\n                      <h2>Interop Comparison</h2>\n                    </ResultsView>\n                    <GeckoData label=\"Gecko Data\"\n                               data={this.state.pathMetadata}\n                               paths={Array.from(this.state.selectedPaths)}\n                               onError={this.onError}>\n                      <h2>Gecko metadata</h2>\n                      <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                      <p>Note: this data is currently not kept up to date</p>\n                    </GeckoData>\n                  </Tabs>\n                </section>);\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newSha: null,\n            runShas: []\n        };\n    }\n\n    onInputChange = (value) => {\n        this.setState({newSha: value});\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newSha);\n        this.setState({editable: false});\n    }\n\n    async componentDidMount() {\n        let url = makeWptFyiUrl(\"/api/runs\", {\"max-count\": \"100\"});\n        let runs = await fetchJson(url);\n        let browserRuns = new Map();\n        for (let run of runs) {\n            if (!browserRuns.has(run.revision)) {\n                browserRuns.set(run.revision, new Set());\n            }\n            browserRuns.get(run.revision).add(run.browser_name);\n        }\n        let runShas = [];\n        for (let run of runs) {\n            if (browserRuns.has(run.revision) && browserRuns.get(run.revision).size === 3) {\n                runShas.push(run.revision);\n            }\n            browserRuns.delete(run.revision);\n        }\n        this.setState({runShas});\n    }\n\n    render() {\n        if (!this.props.runSha && !this.state.editable) {\n            return null;\n        }\n        let url = makeWptFyiUrl(\"\", {sha: this.props.runSha});\n        return [<dt key=\"term\">wpt SHA1:</dt>,\n                this.state.editable ?\n                 (<dd key=\"value\">\n                      {this.state.runShas ?\n                       (<datalist id=\"runShasData\">\n                          {this.state.runShas.map(x => <option key={x} value={x}/>)}\n                        </datalist>) : null}\n                    <TextInput defaultValue={this.props.runSha}\n                               onChange={this.onInputChange}\n                               list=\"runShasData\"/>\n                    <button onClick={this.onUpdateClick}>\n                      Update\n                    </button>\n                  </dd>):\n                 (<dd key=\"value\">\n                    <a href={url}>{this.props.runSha.slice(0,12)}</a>\n                    &nbsp;&nbsp;\n                    <button onClick={this.onEditClick}>\n                      Edit\n                    </button>\n                  </dd>\n                 )];\n    }\n}\n\nclass BrowserInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let browsers = this.props.runs.map(run => {\n            return (<li key={run.browser_name}>\n               {capitalize(run.browser_name)} {run.browser_version} ({run.os_name})\n             </li>);\n        });\n        return [<dt key=\"term\">Browsers:</dt>,\n                (<dd key=\"value\">\n                   <ul>{browsers}</ul>\n                 </dd>)];\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return [<dt key=\"term\">Bug Component:</dt>,\n                (<dd key=\"value\">\n                   <Select\n                     onChange={this.handleChange}\n                     value={this.props.value}\n                     options={options}/>\n                 </dd>)];\n    }\n}\n\nclass Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: \"not has _geckoMetadata.bug\"},\n                                    triaged: {name: \"Triaged\", filter: \"has _geckoMetadata.bug\"},\n                                    custom: {name: \"Custom…\", filter: null}}));\n\n    constructor(props) {\n        super(props);\n        let [type, expr] = this.getType();\n        this.state = {type, expr};\n        this.afterFilterUpdate();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.type !== this.state.type ||\n            prevState.expr !== this.state.expr) {\n            this.afterFilterUpdate();\n        }\n    }\n\n    getType() {\n        // TODO: Maybe this should be in the parent\n        let [type, expr] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            let parts = urlValue.split(\":\");\n            type = parts[0];\n            expr = parts.slice(1).join(\":\");\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n            expr = null;\n        }\n        if (type !== \"custom\") {\n            expr = this.types.get(type).filter;\n        }\n        return [type, expr];\n    }\n\n    onTypeChange = (type) => {\n        if (!this.types.has(type)) {\n            return;\n        }\n        this.setState({type: type});\n        let expr;\n        if (type === \"custom\") {\n            expr = this.state.expr;\n        } else {\n            expr = this.types.get(type).filter;\n        }\n        if (expr) {\n            this.props.onChange(filterCompiler(parseExpr(expr)));\n        }\n    }\n\n    onExprChange = (expr) => {\n        let ast;\n        clearTimeout(this.timer);\n        try {\n            ast = expr ? parseExpr(expr) : null;\n        } catch (e) {\n            this.timer = setTimeout(() => {\n                //TODO: Add UI errors for things that won't compile\n                console.log(e);\n            }, 1000);\n            return;\n        }\n        this.timer = setTimeout(() => {\n            let filter;\n            try {\n                filter = ast ? filterCompiler(ast) : null;\n            } catch(e) {\n                console.error(e);\n                return;\n            }\n            this.props.onChange(filter);\n            this.setState({expr});\n        }, 1000);\n    }\n\n    afterFilterUpdate() {\n        let type = this.state.type;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n        } else if(type === \"custom\") {\n            let expr = this.state.expr;\n            urlParams.set(\"filter\", `custom:${expr}`);\n        } else {\n            urlParams.set(\"filter\", type);\n        }\n    }\n\n    render() {\n        let triageText = <p className=\"note\">\n                           Triaged status is currently derived from a bug: annotation in\nthe gecko metadata on the test file (not on subtests). In the future this will change to\ninclude external annotations accessible to wpt.fyi.\n                         </p>;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": (<div className=\"note\">\n                         <p>\n                           Custom filters are boolean expressions with logical operators\n                           &nbsp;<code>and</code>, <code>or</code>, and <code>not</code>`,\n                           equality operators <code>{\"==\"}</code>, and <code>!=</code>\n                           and custom operators <code>in</code> for text substrings\n                           and <code>has</code> for testing if a field exists.\n                         </p>\n                         <p>\n                           Available fields are <code>test</code> for the test title and\n                           <code>_geckoMetadata</code> for fields set from gecko metadata\n                           Gecko metadata fields include <code>bug</code> and\n                           <code>lsan-allowed</code>\n                         </p>\n                         <p>\n                           The <code>:</code> operator performs a default operation depending\n                           on the selected field</p>\n                         <p>\n                           Examples:\n                         </p>\n                         <ul>\n                           <li><code>historical in test</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>test:historical</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                         </ul>\n                        </div>)\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return [<dt key=\"term\">Filter:</dt>,\n                (<dd key=\"value\">\n                   <Select options={options}\n                           value={this.state.type}\n                           onChange={this.onTypeChange}/>\n                   {this.state.type === \"custom\" ? <TextInput onChange={this.onExprChange}\n                                                              defaultValue={this.state.expr}/> : null}\n                   {optionText.hasOwnProperty(this.state.type) ?\n                    optionText[this.state.type] : null}\n                 </dd>)];\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <label>\n                <Checkbox\n                  checked={this.props.selectedPaths.has(path)}\n                  value={path}\n                  onCheckboxChange={this.onCheckboxChange} />\n                {path}\n              </label>\n            </li>));\n        return [<dt key=\"term\">Test Paths</dt>,\n                (<dd key=\"value\">\n                   <button\n                     onClick={this.onUpdateClick}\n                     disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                     Update\n                   </button>\n                   <ul id=\"test-paths\">\n                     {listItems}\n                   </ul>\n                </dd>)];\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.defaultBrowsers = {\n            failsIn: [\"firefox\"],\n            passesIn: [\"chrome\", \"safari\"]\n        };\n        let comparison = this.getComparison();\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null,\n            passesIn: comparison.passesIn,\n            failsIn: comparison.failsIn,\n        };\n    }\n\n    getComparison() {\n        let rv = {};\n        for (let [key, value] of Object.entries(this.defaultBrowsers)) {\n            rv[key] = value.slice();\n        }\n        for (let key of Object.keys(rv)) {\n            if (urlParams.has(key)) {\n                let value = urlParams.get(key);\n                let listValue = value.split(\",\").filter(x => browsers.includes(x));\n                if (!value.length || listValue.length) {\n                    rv[key] = listValue;\n                }\n            }\n        }\n        return rv;\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.state.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.state.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => result._geckoMetadata = this.getMetadata(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    onBrowserChange = (passesIn, failsIn) => {\n        this.setState({passesIn, failsIn});\n        for (let [key, values] of [[\"passesIn\", passesIn],\n                                   [\"failsIn\", failsIn]]) {\n            values = values.sort();\n            if (!arraysEqual(values, this.defaultBrowsers[key])) {\n                urlParams.set(key, values.join(\",\"));\n            } else {\n                urlParams.delete(key);\n            }\n        }\n    }\n\n    render() {\n        let data;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n           data = (<div>\n                      <p>Loading…</p>\n                    </div>);\n        } else if (this.state.results === null) {\n            data = (<div>\n                      <p>Load failed</p>\n                    </div>);\n        } else if (!this.state.results.results.length) {\n            data = (<div>\n                      <p>No results</p>\n                    </div>);\n        } else {\n            let results = this.state.filteredResults ? this.state.filteredResults : [];\n            let testItems = results.map(result => (<TestItem\n                                                     failsIn={this.state.failsIn}\n                                                     passesIn={this.state.passesIn}\n                                                     runs={this.props.runs}\n                                                     result={result}\n                                                     key={result.test}\n                                                     geckoMetadata={result.test._geckoMetadata || new Map()}\n                                                     onError={this.props.onError}/>));\n            testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n            data = [(<p key=\"desc\">{results.length} top-level tests with\n                       &nbsp;{results\n                              .map(x => x.legacy_status[0].total)\n                              .reduce((x,y) => x+y, 0)} subtests</p>),\n                    <ul key=\"data\">{testItems}</ul>];\n        }\n        return (<div>\n                  {this.props.children}\n                  <ResultsViewSummary failsIn={this.state.failsIn}\n                                      passesIn={this.state.passesIn}\n                                      onChange={this.onBrowserChange}/>\n                  {data}\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({}, {});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps, prevState);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps, prevState) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.state.failsIn === prevState.failsIn &&\n            this.state.passesIn === prevState.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass ResultsViewSummary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newPassesIn: this.props.passesIn,\n            newFailsIn: this.props.failsIn,\n        };\n    }\n\n    joinList(items) {\n        if (!items.length) {\n            return \"\";\n        }\n        if (items.length === 1) {\n            return items[0];\n        }\n        let commaSeparated = items.slice(0, items.length - 1).join(\", \");\n        return `${commaSeparated}, and ${items[items.length - 1]}`;\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onSelectChange = (data, type) => {\n        let key;\n        let state = {};\n        if (type === \"passesIn\") {\n            key = \"newPassesIn\";\n        } else if (type === \"failsIn\") {\n            key = \"newFailsIn\";\n        } else {\n            console.error(`Unknown key ${type}`);\n        }\n        state[key] = data;\n        this.setState(state);\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newPassesIn, this.state.newFailsIn);\n        this.setState({editable: false});\n    }\n\n    render() {\n        if (!this.state.editable) {\n            let text;\n            if (this.props.passesIn.length && this.props.failsIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}\nbut not in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            } else if (this.props.passesIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}`;\n            } else {\n                text = `Tests that don't pass in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            }\n            return (<p>\n                      {text}\n                      &nbsp;\n                      <button onClick={this.onEditClick}>\n                        Edit\n                      </button>\n                    </p>);\n        } else {\n            let passInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.passesIn.includes(x)\n            };});\n            let failInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.failsIn.includes(x)\n            };});\n            return (<p>Tests that\n                      &nbsp;<label>pass in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"passesIn\")}\n                          options={passInOptions}/>\n                      </label>\n                      &nbsp;but\n                      <label>\n                        &nbsp;not in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"failsIn\")}\n                          options={failInOptions}/>\n                      </label>\n                      &nbsp;\n                      <button\n                        onClick={this.onUpdateClick}\n                        disabled={this.state.newPassesIn.length === 0 && this.state.newFailsIn.length === 0}>\n                        Update\n                      </button>\n                    </p>);\n        }\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = {unconditional: new Map(), conditional: new Map()};\n        let lsan = {unconditional: new Map(), conditional: new Map()};\n        let crashes = {unconditional: new Map(), conditional: new Map()};\n        let set = (key, data, dest, mapFn) => {\n            let destKey;\n            if (!data || !data.length) {\n                return;\n            }\n            destKey = (data.length === 1 && data[0][0] == null) ? \"unconditional\": \"conditional\";\n            if (mapFn) {\n                data = data.map(mapFn);\n            }\n            dest[destKey].set(key, data);\n        };\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            set(dir, dirData.disabled, disabled);\n            set(dir, dirData['lsan-allowed'], lsan);\n            set(dir, dirData.expected_CRASH, crashes, cond => [cond, null]);\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                set(testKey, testData.disabled, disabled);\n                set(testKey, testData.expected_CRASH, crashes, cond => [cond, null]);\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    set(subtestKey, subtestData.disabled, disabled);\n                    set(subtestKey, subtestData.expected_CRASH, crashes, cond => [cond, null]);\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        if (!this.props.data) {\n            return <p>Loading</p>;\n        }\n        let byType = this.groupData();\n        if (byType === null ||\n            !Object.values(byType).some(typeValues => Object.values(typeValues).some(x => x.size > 0))) {\n            return (<section>\n                      <h2>Gecko metadata</h2>\n                      <p>None</p>\n                      </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <GeckoDataSection\n                    key=\"crashes\"\n                    data={byType.crashes}\n                    render={value => null}\n                    title=\"Crashes\"\n                    desc=\"tests crash\" />\n                  <GeckoDataSection\n                    key=\"disabled\"\n                    data={byType.disabled}\n                    render={value => <MaybeBugLink value={value} />}\n                    title=\"Disabled\"\n                    desc=\"tests are disabled\" />\n                  <GeckoDataSection\n                    key=\"lsan\"\n                    data={byType.lsan}\n                    render={value => <LsanListValue value={value} />}\n                    title=\"LSAN Failures\"\n                    desc=\"directories have LSAN failures\"/>\n                </section>);\n    }\n}\n\n\nclass GeckoDataSection extends Component {\n    render() {\n        let {conditional, unconditional} = this.props.data;\n        if (!conditional.size && !unconditional.size) {\n            return null;\n        }\n        let count = 0;\n        let items = [];\n        for (let [type, typeData] of [[\"In all configurations\", unconditional],\n                                      [\"In some configurations\", conditional]]) {\n            if (!typeData.size) {\n                continue;\n            }\n            items.push(<h4 key={type}>{type}</h4>);\n            for (let [test, values] of iterMapSorted(typeData)) {\n                count++;\n                items.push(<GeckoMetadataLine\n                             key={test}\n                             title={test}\n                             values={values}\n                             render={this.props.render}/>);\n            }\n        }\n        return (<section>\n                  <h3>{this.props.title}</h3>\n                  <p>{count} {this.props.desc}</p>\n                  <ul>{items}</ul>\n                </section>);\n    }\n\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}