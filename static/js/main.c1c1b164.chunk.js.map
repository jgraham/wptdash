{"version":3,"sources":["form.js","urlparams.js","filter.js","filterselector.js","metaeditor.js","utils.js","notification.js","App.js","serviceWorker.js","index.js"],"names":["Checkbox","Component","constructor","props","super","handleChange","event","this","setState","checked","target","onCheckboxChange","value","state","render","name","type","onChange","TextInput","defaultValue","list","Select","selectItems","options","map","option","key","SelectMultiple","selectedOptions","call","x","selected","size","multiple","urlParams","url","URL","window","location","params","searchParams","_update","history","replaceState","document","title","href","get","has","set","delete","append","FilterError","Error","handlers","and","data","Array","isArray","args","child","push","filterCompiler","operators","or","not","in","ctx","every","some","lhs","rhs","arg","ctxValue","getValue","includes","undefined","keyParts","split","part","Map","input","keys","Object","length","console","error","op","hasOwnProperty","ParseError","operatorTokens","Set","unaryOperators","precedenceGroups","operatorPrecedence","i","groupIdx","group","operatorAliases","entries","defaultOperator","test","Node","to_object","obj","children","UnaryOperatorNode","operand","BinaryOperatorNode","ValueNode","slice","createOperatorNode","token","Parser","operands","top","parse","tokens","apply","pop","precedence","operator","transformDefaultOperator","parseExpr","expr","space","term","initialLength","m","match","skip","tokenize","Filter","types","none","filter","untriaged","queryTerms","link","triaged","custom","onTypeChange","afterTypeChange","onExprChange","ast","clearTimeout","timer","e","setTimeout","log","urlValue","parts","join","componentDidUpdate","prevProps","prevState","afterFilterUpdate","typeData","triageText","className","optionText","from","MetadataEditor","changes","id","onSubmit","onCancel","MetadataPendingChanges","listItems","change","subtest","onClick","arraysEqual","a","b","a_value","setsEqual","elem","iterMapSorted","cmp","sort","enumerate","iter","count","item","NotificationArea","onDismiss","onDismissNotification","notifications","idx","notification","level","content","Notification","extraControls","retry","timeout","TASK_QUEUE_BASE","passStatuses","browsers","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","bugLinkRe","makeWptFyiUrl","path","staging","defaults","forEach","capitalize","str","toUpperCase","FetchError","resp","message","status","statusText","async","fetchJson","fetch","ok","json","anyRe","workerRe","testToPath","pathname","exec","makeNotification","App","onError","err","notify","findIndex","splice","onFilterChange","filterFunc","onRunChange","runSha","onMetadataPendingSubmit","isMatch","product","changedMeta","metadataPendingChanges","meta","prevMetadata","wptMetadata","results","result","newMeta","index","prUrl","patchMetadata","onMetadataPendingCancel","onMetadataChange","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","bugComponents","wptRuns","geckoMetadata","pathGeckoMetadata","haveData","bugComponent","wptRun","concat","body","JSON","stringify","hostname","method","mode","cache","credentials","headers","text","redirect","indexName","artifactName","runId","loadTaskClusterData","taskId","fetchData","taskStatus","run","array","reversed","runs","artifactData","artifacts","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","urlPaths","aligned","runsUrl","loadWptRunData","full_revision_hash","metaUrl","metadata","loadWptMetadata","Promise","all","loadBugComponentData","loadGeckoMetadata","filterGeckoMetadata","makeRe","pathPrefixes","RegExp","pathRe","notPaths","values","notPathRe","allMetadata","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","basePath","found","filename","relPath","label","RunInfo","onInputChange","newSha","onEditClick","editable","onUpdateClick","runShas","browserRuns","revision","add","browser_name","sha","BrowserInfo","browser_version","os_name","BugComponentSelector","TestPaths","disabled","ResultsView","onBrowserChange","passesIn","failsIn","defaultBrowsers","comparison","getComparison","loading_state","filteredResults","rv","listValue","buildQuery","query","run_ids","topAndClause","browser","orClause","pattern","searchQuery","fetchResults","_wptMetadata","getWptMetadata","_geckoMetadata","getGeckoMetadata","metaEntry","dirParts","testName","dirPath","copyMeta","src","dirMeta","dirMetadata","_tests","testMetadata","_subtests","updateFilteredResults","testItems","legacy_status","total","reduce","y","fetchIfPossible","ResultsViewSummary","onSelectChange","newPassesIn","newFailsIn","joinList","items","passInOptions","failInOptions","TreeRow","handleClick","showDetails","expanded","rowId","rowTitle","rowExtra","TestItem","hash","TestDetails","loaded","processResultData","resultBySubtest","browserResults","subtests","resultByBrowser","filteredResultBySubtest","resultData","promises","results_url","promise","then","success","catch","resolved","headerRow","subtestMetadata","resultRows","WptTestMetadata","newLinkValue","onAddLink","bugUrl","addLink","onRemoveLink","componentDidMount","filterBugLinks","bugLinks","controlElements","onRemove","fxMetadata","relevantResults","MetadataBugLink","GeckoMetaSummary","renderBug","metaProps","prop","InlineOrTreeMetadata","ResultRow","cells","ResultCell","GeckoData","groupData","unconditional","conditional","intermittent","lsan","crashes","dest","mapFn","destKey","dir","dirData","expected_CRASH","cond","testData","testKey","subtestData","subtestKey","byType","typeValues","desc","GeckoDataSection","GeckoMetadataLine","condition","conditionStr","valueList","MaybeBugLink","bugNumberRe","re","LsanListValue","frames","StatusListValue","statuses","prev","current","Tabs","handleClickTab","activeTab","tabItems","active","activeTabContent","Tab","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1c1b164.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  onChange={this.handleChange}\n                  defaultValue={this.props.defaultValue}\n                  list={this.props.list}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class SelectMultiple extends Component {\n    handleChange = (event) => {\n        let selectedOptions = event.target.selectedOptions;\n        this.props.onChange([].map.call(selectedOptions, x => x.value));\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value} selected={option.selected}>\n                                                 {option.name}\n                                                 </option>);\n        return (<select\n                  size=\"3\"\n                  multiple\n                  onChange={this.handleChange}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class DataList extends Component {\n    render() {\n        let items = this.props.options.map(option => <option value={option} key={option}/>);\n        return (<datalist id={this.props.id}>\n                  {items}\n                </datalist>);\n    }\n}\n","class UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nexport const urlParams = new UrlParams();\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    \"==\": (data)  => {\n        return operators[\"==\"](data);\n    },\n\n    not: ([data]) => {\n        return operators.not(filterCompiler(data));\n    },\n\n    in: (data) => {\n        return operators.in(data);\n    },\n\n    has: ([data]) => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    \"==\": ([lhs, rhs]) => {\n        return lhs === rhs;\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    in: ([lhs, rhs]) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, rhs);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(lhs);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(input);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        console.error(input);\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\nclass ParseError extends Error{};\n\nfunction* tokenize(input) {\n    let space = /\\s*/;\n    let term = /\\w(?:\\w|\\d|\\.|_|-|\\+|\\/)*|\\d+|==|!=|\\(|\\)|:|\".*?[^\\\\]\"|'.*?[^\\\\]'/;\n\n    let initialLength = input.length;\n\n    while (input.length) {\n        // Skip spaces\n        let m = input.match(space);\n        if (m[0].length) {\n            let skip = m[0].length;\n            input = input.slice(skip);\n            if (!input.length) {\n                break;\n            }\n        }\n\n        //Match the next token\n        m = input.match(term);\n        if (!m) {\n            throw new ParseError(`Invalid input at character ${initialLength - input.length}`);\n        }\n        let token = m[0];\n        yield token;\n        input = input.slice(token.length);\n    }\n}\n\nconst operatorTokens = new Set([\"==\", \"!=\", \"in\", \"and\", \"or\", \"!\", \"not\", \":\", \"has\"]);\nconst unaryOperators = new Set([\"!\", \"not\", \"has\"]);\n\nconst precedenceGroups = [[\":\"], [\"in\", \"==\", \"!=\", \"has\"], [\"not\", \"!\"], [\"and\"], [\"or\"]];\nconst operatorPrecedence = new Map();\n\nfor (let [groupIdx, group] of precedenceGroups.map((x, i) => [i, x])) {\n    for (let op of group) {\n        operatorPrecedence.set(op, precedenceGroups.length - groupIdx);\n    }\n}\n\nconst operatorAliases = new Map(Object.entries({\"!\": \"not\"}));\n\nconst defaultOperator = new Map(Object.entries({test: \"in\"}));\n\n\nclass Node {\n    constructor(name) {\n        this.name = name;\n    }\n\n    to_object() {\n        let obj = {};\n        obj[this.name] = this.children().map(x => x.to_object());\n        return obj;\n    }\n}\n\nclass UnaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || !unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.operand = null;\n    }\n\n    children() {\n        return [this.operand];\n    }\n}\n\nclass BinaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.lhs = null;\n        this.rhs = null;\n    }\n\n    children() {\n        return [this.lhs, this.rhs];\n    }\n}\n\nclass ValueNode extends Node {\n    constructor(name) {\n        if (name[0] === \"'\" || name[0] === '\"') {\n            name = name.slice(1, name.length - 1);\n        }\n        super(name);\n    }\n    to_object() {\n        return this.name;\n    }\n}\n\nfunction createOperatorNode(token) {\n    if (unaryOperators.has(token)) {\n        return new UnaryOperatorNode(token);\n    }\n    return new BinaryOperatorNode(token);\n}\n\nfunction transformDefaultOperator(operator) {\n    // The default operator creates a different kind of relation depending on the arguments\n    let op = \"==\";\n    if (defaultOperator.has(operator.lhs.name)) {\n        op = defaultOperator.get(operator.lhs.name);\n    }\n    operator.name = op;\n    if (op === \"in\") {\n        [operator.lhs, operator.rhs] = [operator.rhs, operator.lhs];\n    }\n    return operator;\n}\n\nclass Parser {\n    constructor() {\n        this.operators = [];\n        this.operands = [];\n    }\n\n    top() {\n        return this.operators.length ? this.operators[this.operators.length - 1] : null;\n    }\n\n    parse(tokens) {\n        for (let token of tokens) {\n            if (token === \"(\") {\n                this.operators.push(token);\n            } else if (token === \")\") {\n                while(this.top() !== null && this.top() !== \"(\") {\n                    this.apply();\n                }\n                if (!this.operators.length) {\n                    throw new ParseError(\"Mismatched parens\");\n                }\n                this.operators.pop();\n            } else if (operatorTokens.has(token)) {\n                while (this.top() !== null &&\n                       this.top() !== \")\" &&\n                       this.precedence(this.top().name) >= this.precedence(token)) {\n                    this.apply();\n                }\n                this.operators.push(createOperatorNode(token));\n            } else {\n                this.operands.push(new ValueNode(token));\n            }\n        }\n        while (this.operators.length) {\n            this.apply();\n        }\n        if (this.operands.length !== 1) {\n            throw new ParseError(\"Operands remaining at end of input\");\n        }\n        return this.operands[0];\n    }\n\n    precedence(token) {\n        return operatorPrecedence.get(token);\n    }\n\n    apply() {\n        let operator = this.operators.pop();\n        if (unaryOperators.has(operator.name)) {\n            let operand = this.operands.pop();\n            if (!operand) {\n                throw new Error();\n            }\n            operator.operand = operand;\n        } else {\n            let rhs = this.operands.pop();\n            let lhs = this.operands.pop();\n            if (!lhs || !rhs) {\n                throw new Error();\n            }\n            operator.lhs = lhs;\n            operator.rhs = rhs;\n            if (operator.name === \":\") {\n                operator = transformDefaultOperator(operator);\n            }\n        }\n        this.operands.push(operator);\n    }\n}\n\n\nexport function parseExpr(expr) {\n    let parser = new Parser();\n    return parser.parse(tokenize(expr)).to_object();\n}\n","import React, { Component } from 'react';\nimport {TextInput, Select} from './form';\nimport {urlParams} from './urlparams';\nimport {filterCompiler, parseExpr} from './filter';\n\nexport class Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: null,\n                                                queryTerms: [{not: {link: \"bugzilla.mozilla.org\"}}]},\n                                    triaged: {name: \"Triaged\", filter: null,\n                                              queryTerms: [{link: \"bugzilla.mozilla.org\"}]},\n                                    custom: {name: \"Custom…\", filter: null, queryTerms: []}}));\n\n    constructor(props) {\n        super(props);\n        let [type, expr] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            let parts = urlValue.split(\":\");\n            type = parts[0];\n            expr = parts.slice(1).join(\":\");\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n            expr = null;\n        }\n        if (type !== \"custom\") {\n            expr = this.types.get(type).filter;\n        }\n        this.state = {type, expr};\n        this.afterTypeChange(type);\n        if (expr) {\n            this.onExprChange(expr);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.type !== this.state.type ||\n            prevState.expr !== this.state.expr) {\n            this.afterFilterUpdate();\n        }\n    }\n\n    onTypeChange = (type) => {\n        if (!this.types.has(type)) {\n            return;\n        }\n        this.setState({type: type});\n        this.afterTypeChange(type);\n    }\n\n    afterTypeChange(type) {\n        let expr;\n        let queryTerms = [];\n        if (type === \"custom\") {\n            expr = this.state.expr;\n        } else {\n            let typeData = this.types.get(type);\n            expr = typeData.filter;\n            queryTerms = typeData.queryTerms || [];\n        }\n        let filter;\n        if (expr) {\n            filter = filterCompiler(parseExpr(expr));\n        }\n        this.props.onChange(filter, queryTerms);\n    }\n\n    onExprChange = (expr) => {\n        let ast;\n        clearTimeout(this.timer);\n        try {\n            ast = expr ? parseExpr(expr) : null;\n        } catch (e) {\n            this.timer = setTimeout(() => {\n                //TODO: Add UI errors for things that won't compile\n                console.log(e);\n            }, 1000);\n            return;\n        }\n        this.timer = setTimeout(() => {\n            let filter;\n            try {\n                filter = ast ? filterCompiler(ast) : null;\n            } catch(e) {\n                console.error(e);\n                return;\n            }\n            this.props.onChange(filter, []);\n            this.setState({expr});\n        }, 1000);\n    }\n\n    afterFilterUpdate() {\n        let type = this.state.type;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n        } else if(type === \"custom\") {\n            let expr = this.state.expr;\n            urlParams.set(\"filter\", `custom:${expr}`);\n        } else {\n            urlParams.set(\"filter\", type);\n        }\n    }\n\n    render() {\n        let triageText = <p className=\"note\">\n                           Triaged status is determined by a bugzilla link for the test in the&nbsp;\n                           <a href=\"https://github.com/web-platform-tests/wpt-metadata\">wpt-metadata</a> repository.\n                         </p>;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": (<div className=\"note\">\n                         <p>\n                           Custom filters are boolean expressions with logical operators\n                           &nbsp;<code>and</code>, <code>or</code>, and <code>not</code>`,\n                           equality operators <code>{\"==\"}</code>, and <code>!=</code>\n                           and custom operators <code>in</code> for text substrings\n                           and <code>has</code> for testing if a field exists.\n                         </p>\n                         <p>\n                           Available fields are <code>test</code> for the test title and\n                           <code>_geckoMetadata</code> for fields set from gecko metadata\n                           Gecko metadata fields include <code>bug</code> and\n                           <code>lsan-allowed</code>\n                         </p>\n                         <p>\n                           The <code>:</code> operator performs a default operation depending\n                           on the selected field</p>\n                         <p>\n                           Examples:\n                         </p>\n                         <ul>\n                           <li><code>historical in test</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>test:historical</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                         </ul>\n                        </div>)\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return [<dt key=\"term\">Filter:</dt>,\n                (<dd key=\"value\">\n                   <Select options={options}\n                           value={this.state.type}\n                           onChange={this.onTypeChange}/>\n                   {this.state.type === \"custom\" ? <TextInput onChange={this.onExprChange}\n                                                              defaultValue={this.state.expr}/> : null}\n                   {optionText.hasOwnProperty(this.state.type) ?\n                    optionText[this.state.type] : null}\n                 </dd>)];\n    }\n}\n","import React, { Component } from 'react';\n\nexport class MetadataEditor extends Component {\n    render() {\n        if (!this.props.changes.size) {\n            return null;\n        }\n        let loginUrl = `https://staging.wpt.fyi/login`;\n        return (<section id=\"metadata\">\n                  <h3>Metadata Changes</h3>\n                  <p>Submitting MetaData requires first signing in to <a href={loginUrl} target=\"_blank\">staging.wpt.fyi</a></p>\n                  <MetadataPendingChanges\n                    changes={this.props.changes}\n                    onSubmit={this.props.onSubmit}\n                    onCancel={this.props.onCancel} />\n                </section>);\n    };\n}\n\n\nclass MetadataPendingChanges extends Component {\n    render() {\n        let listItems = [];\n        for (let [test, changes] of this.props.changes.entries()) {\n            for (let change of changes) {\n                listItems.push(<li key={change.test + change.url}>{test} | {change.subtest} | {change.change} | {change.url}</li>);\n            }\n        }\n        return (<div>\n                  <details>\n                  <summary>Pending Changes</summary>\n                    <ol>\n                      {listItems}\n                    </ol>\n                  </details>\n                  <div>\n                    <button onClick={this.props.onSubmit}>Sumbit Changes</button>\n                    <button onClick={this.props.onCancel}>Cancel</button>\n                  </div>\n                </div>);\n    }\n}\n","export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","import React, { Component } from 'react';\nimport {enumerate} from './utils';\n\nexport class NotificationArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissNotification(id);\n    }\n\n    render() {\n        if (!this.props.entries.length) {\n            return null;\n        }\n        let notifications = [];\n        for (let [idx, notification] of enumerate(this.props.entries)) {\n            notifications.push(<Notification\n                                 key={`notification-${notification.id}`}\n                                 id={notification.id}\n                                 level={notification.level}\n                                 content={notification.content}\n                                 options={notification.options}\n                                 onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"notifications\">\n                  {notifications}\n                </ul>);\n    }\n}\n\nclass Notification extends Component {\n    constructor(props) {\n        super(props);\n        this.timer = null;\n    }\n\n    onDismiss = () => {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n        this.props.onDismiss(this.props.id);\n    }\n\n    render() {\n        let extraControls = [];\n        if (this.props.options.retry) {\n            let retry = () => {\n                this.props.onDismiss(this.props.id);\n                this.props.options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        if (this.props.options.timeout) {\n            this.timer = setTimeout(this.onDismiss, this.props.options.timeout);\n        }\n        return (<li className={this.props.level}>\n                  {this.props.content}\n                  <button onClick={this.onDismiss}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Filter} from './filterselector';\nimport {Checkbox, TextInput, Select, SelectMultiple} from './form';\nimport {MetadataEditor} from './metaeditor';\nimport {NotificationArea} from './notification';\nimport {urlParams} from './urlparams';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\n\nconst TASK_INDEX_BASE = \"https://firefox-ci-tc.services.mozilla.com/api/index/v1\";\nconst TASK_QUEUE_BASE = \"https://firefox-ci-tc.services.mozilla.com/api/queue/v1\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\nconst WPT_FYI_STAGING_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst browsers = [\"chrome\", \"firefox\", \"safari\"];\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nconst bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n\nfunction makeWptFyiUrl(path, params={}, staging=false) {\n    let base = staging ? WPT_FYI_STAGING_BASE : WPT_FYI_BASE;\n    let url = new URL(`${base}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    params = new Map(Object.entries(params));\n    for (let [key, value] of defaults) {\n        if (!params.has(key)) {\n            url.searchParams.append(key, value);\n        }\n    }\n    for (let [key, value] of params) {\n        if (value === null || value === undefined) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    if (str) {\n        return str && str[0].toUpperCase() + str.slice(1);\n    } else {\n        return \"\";\n    }\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nlet makeNotification = (() => {\n    let id = -1;\n    return (level, content, options) => {\n        id++;\n        return {id, level, content, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            runSha: null,\n            wptRuns: null,\n            wptMetadata: null,\n            geckoMetadata: {},\n            pathGeckoMetadata: {},\n            notifications: [],\n            haveData: {\n                bugComponent: false,\n                geckoMetadata: false,\n                wptMetadata: false,\n                wptRun: false,\n            },\n            filter: null,\n            filterFunc: null,\n            queryTerms: [],\n            metadataPendingChanges: new Map(),\n        };\n    }\n\n    onError = (err, options={}) => {\n        let content = err.message || \"Unknown Error\";\n        this.notify(\"error\", content, options);\n    }\n\n    onDismissNotification = (id) => {\n        let notifications = Array.from(this.state.notifications);\n        let idx = notifications.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        notifications.splice(idx, 1);\n        this.setState({notifications});\n    }\n\n    onFilterChange = (filterFunc, queryTerms) => {\n        this.setState({filterFunc, queryTerms});\n    }\n\n    onRunChange = (runSha) => {\n        this.setState({runSha});\n    }\n\n    onMetadataPendingSubmit = async () => {\n        let isMatch = (item, change) => (item.product === \"firefox\" &&\n                                         item.url === change.url &&\n                                         item.subtest === change.subtest &&\n                                         item.status === change.status);\n        let changedMeta = {};\n        for (let [test, changes] of this.state.metadataPendingChanges) {\n            // Flatten out the metadata\n            let meta = [];\n            let prevMetadata = this.state.wptMetadata[test];\n            if (prevMetadata) {\n                for (let item of prevMetadata) {\n                    if (item.results) {\n                        for (let result of item.results) {\n                            meta.push({...item, ...result});\n                        }\n                    } else {\n                        meta.push({...item});\n                    }\n                }\n            }\n\n            for (let change of changes) {\n                if (change.change === \"REMOVE\") {\n                    meta = meta.filter(item => !isMatch(item, change));\n                } else if (change.change === \"ADD\") {\n                    if (!meta.some(item => isMatch(item, change))) {\n                        let newMeta = {product: \"firefox\",\n                                       url: change.url};\n                        if (change.subtest) {\n                            newMeta.subtest = change.subtest;\n                        }\n                        if (change.status) {\n                            newMeta.status = change.status;\n                        }\n                        meta.push(newMeta);\n                    }\n                }\n            }\n            console.log(\"meta\", meta);\n            changedMeta[test] = [];\n            // Now unflatten the metadata\n            let index = new Map();\n            for (let newMeta of meta) {\n                let key = [newMeta.product, newMeta.url].join(\",\");\n                if (!index.has(key)) {\n                    index.set(key, changedMeta[test].length);\n                    changedMeta[test].push({product: newMeta.product, url:newMeta.url});\n                }\n                if (newMeta.subtest || newMeta.status) {\n                    let item = changedMeta[test][index.get(key)];\n                    if (!item.results) {\n                        item.results = [];\n                    }\n                    let result = {};\n                    if (newMeta.subtest) {\n                        result.subtest = {};\n                    }\n                    if (newMeta.status) {\n                        result.status = newMeta.status;\n                    }\n                    item.results.push(result);\n                }\n            }\n        }\n        let prUrl = await this.patchMetadata(changedMeta);\n        this.notify(\"info\",\n                    <span>Opened PR <a href={prUrl}>{prUrl}</a></span>,\n                    {timeout: 60000});\n        this.setState({metadataPendingChanges: new Map()});\n    }\n\n    onMetadataPendingCancel = () => {\n        this.setState({metadataPendingChanges: new Map()});\n    }\n\n    onMetadataChange = (change) => {\n        console.log(\"onMetadataChange\", change);\n        let metadataPendingChanges = new Map(this.state.metadataPendingChanges);\n        if (!metadataPendingChanges.has(change.test)) {\n            metadataPendingChanges.set(change.test, []);\n        }\n        // TODO: consolidate changes\n        metadataPendingChanges.get(change.test).push(change);\n        this.setState({metadataPendingChanges});\n    }\n\n    notify(level, content, options={}) {\n        let notification = makeNotification(level, content, options);\n        this.setState(state => {return {notifications: state.notifications.concat(notification)};});\n    }\n\n    async patchMetadata(data) {\n        let body = JSON.stringify(data);\n        if (window.location.hostname !== \"jgraham.github.io\") {\n            this.onError(new Error(`Unable to submit data from ${window.location.hostname}`), {});\n            console.error(data);\n            return null;\n        }\n        let url = makeWptFyiUrl(\"api/metadata/triage\", {\"product\": \"firefox\"}, true);\n        const response = await fetch(url, {\n            method: 'PATCH',\n            mode: 'cors',\n            cache: 'no-cache',\n            credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body\n        });\n        return response.text();\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/task/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/task/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/task/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/task/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        this.setState({haveData: {...this.state.haveData, bugComponent: false}});\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n        this.setState({haveData: {...this.state.haveData, bugComponent: true}});\n    }\n\n    async loadWptRunData() {\n        this.setState({haveData: {...this.state.haveData, wptRun: false}});\n        let params = {aligned: \"\"};\n        if (this.state.runSha) {\n            params[\"sha\"] = this.state.runSha;\n        }\n        let runsUrl = makeWptFyiUrl(\"api/runs\", params);\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        let runSha = runs[0].full_revision_hash;\n        this.setState({wptRuns: runs, runSha});\n        this.setState({haveData: {...this.state.haveData, wptRun: true}});\n    }\n\n    async loadWptMetadata() {\n        this.setState({haveData: {...this.state.haveData, wptMetadata: false}});\n        let params = {\"product\": [\"firefox\"]};\n        let metaUrl = makeWptFyiUrl(\"api/metadata\", params);\n        let metadata = await this.fetchData(metaUrl, async () => this.loadWptMetadata());\n        this.setState({wptMetadata: metadata});\n        this.setState({haveData: {...this.state.haveData, wptMetadata: true}});\n    }\n\n    async loadGeckoMetadata() {\n        this.setState({haveData: {...this.state.haveData, geckoMetadata: false}});\n        let metadata = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-wpt-metadata-summary\",\n                                                      \"summary.json\");\n        this.setState({geckoMetadata: metadata});\n        this.setState({haveData: {...this.state.haveData, geckoMetadata: true}});\n    }\n\n    async componentDidMount() {\n        await Promise.all([this.loadBugComponentData(),\n                           this.loadWptRunData(),\n                           this.loadWptMetadata(),\n                           this.loadGeckoMetadata()]);\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathGeckoMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n        if (prevState.runSha !== this.state.runSha) {\n            await this.loadWptRunData();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body = [];\n        if (this.state.runSha) {\n            body.push(<section id=\"selector\" key=\"selector\">\n                        <dl>\n                          <RunInfo runSha={this.state.runSha}\n                                   onChange={this.onRunChange} />\n                          <BrowserInfo runs={this.state.wptRuns} />\n                          <BugComponentSelector onComponentChange={this.onComponentChange}\n                                                components={this.state.bugComponents}\n                                                value={this.state.currentBugComponent} />\n                          <Filter onChange={this.onFilterChange} />\n                          <TestPaths\n                            paths={paths}\n                            selectedPaths={this.state.selectedPaths}\n                            onChange={this.onPathsChange} />\n                        </dl>\n                        </section>);\n        }\n        if (Object.values(this.state.haveData).includes(false)) {\n            body.push(<section id=\"details\" key=\"details\">\n                        <p>Loading…</p>\n                      </section>);\n        } else {\n            body.push(\n                <section id=\"details\" key=\"details\">\n                  <Tabs>\n                    <ResultsView label=\"Interop Comparison\"\n                                 runs={this.state.wptRuns}\n                                 paths={this.state.selectedPaths}\n                                 geckoMetadata={this.state.pathGeckoMetadata}\n                                 wptMetadata={this.state.wptMetadata}\n                                 onError={this.onError}\n                                 filter={this.state.filterFunc}\n                                 queryTerms={this.state.queryTerms}\n                                 onMetadataChange={this.onMetadataChange}>\n                      <h2>Interop Comparison</h2>\n                    </ResultsView>\n                    <GeckoData label=\"Gecko Data\"\n                               data={this.state.pathGeckoMetadata}\n                               paths={this.state.selectedPaths}\n                               onError={this.onError}>\n                      <h2>Gecko metadata</h2>\n                      <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                      <p>Note: this data is currently not kept up to date</p>\n                    </GeckoData>\n                  </Tabs>\n                  <MetadataEditor changes={this.state.metadataPendingChanges}\n                                  onSubmit={this.onMetadataPendingSubmit}\n                                  onCancel={this.onMetadataPendingCancel} />\n                </section>);\n        }\n        return (\n            <div id=\"app\">\n              <NotificationArea\n                entries={this.state.notifications}\n                onDismissNotification={this.onDismissNotification}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\n\nclass RunInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newSha: null,\n            runShas: []\n        };\n    }\n\n    onInputChange = (value) => {\n        this.setState({newSha: value});\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newSha);\n        this.setState({editable: false});\n    }\n\n    async componentDidMount() {\n        let url = makeWptFyiUrl(\"/api/runs\", {\"max-count\": \"100\"});\n        let runs = await fetchJson(url);\n        let browserRuns = new Map();\n        for (let run of runs) {\n            if (!browserRuns.has(run.revision)) {\n                browserRuns.set(run.revision, new Set());\n            }\n            browserRuns.get(run.revision).add(run.browser_name);\n        }\n        let runShas = [];\n        for (let run of runs) {\n            if (browserRuns.has(run.revision) && browserRuns.get(run.revision).size === 3) {\n                runShas.push(run.revision);\n            }\n            browserRuns.delete(run.revision);\n        }\n        this.setState({runShas});\n    }\n\n    render() {\n        if (!this.props.runSha && !this.state.editable) {\n            return null;\n        }\n        let url = makeWptFyiUrl(\"\", {sha: this.props.runSha});\n        return [<dt key=\"term\">wpt SHA1:</dt>,\n                this.state.editable ?\n                 (<dd key=\"value\">\n                      {this.state.runShas ?\n                       (<datalist id=\"runShasData\">\n                          {this.state.runShas.map(x => <option key={x} value={x}/>)}\n                        </datalist>) : null}\n                    <TextInput defaultValue={this.props.runSha}\n                               onChange={this.onInputChange}\n                               list=\"runShasData\"/>\n                    <button onClick={this.onUpdateClick}>\n                      Update\n                    </button>\n                  </dd>):\n                 (<dd key=\"value\">\n                    <a href={url}>{this.props.runSha.slice(0,12)}</a>\n                    &nbsp;&nbsp;\n                    <button onClick={this.onEditClick}>\n                      Edit\n                    </button>\n                  </dd>\n                 )];\n    }\n}\n\nclass BrowserInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let browsers = this.props.runs.map(run => {\n            return (<li key={run.browser_name}>\n               {capitalize(run.browser_name)} {run.browser_version} ({run.os_name})\n             </li>);\n        });\n        return [<dt key=\"term\">Browsers:</dt>,\n                (<dd key=\"value\">\n                   <ul>{browsers}</ul>\n                 </dd>)];\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return [<dt key=\"term\">Bug Component:</dt>,\n                (<dd key=\"value\">\n                   <Select\n                     onChange={this.handleChange}\n                     value={this.props.value}\n                     options={options}/>\n                 </dd>)];\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <label>\n                <Checkbox\n                  checked={this.props.selectedPaths.has(path)}\n                  value={path}\n                  onCheckboxChange={this.onCheckboxChange} />\n                {path}\n              </label>\n            </li>));\n        return [<dt key=\"term\">Test Paths</dt>,\n                (<dd key=\"value\">\n                   <button\n                     onClick={this.onUpdateClick}\n                     disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                     Update\n                   </button>\n                   <ul id=\"test-paths\">\n                     {listItems}\n                   </ul>\n                </dd>)];\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.defaultBrowsers = {\n            failsIn: [\"firefox\"],\n            passesIn: [\"chrome\", \"safari\"]\n        };\n        let comparison = this.getComparison();\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null,\n            passesIn: comparison.passesIn,\n            failsIn: comparison.failsIn,\n        };\n    }\n\n    getComparison() {\n        let rv = {};\n        for (let [key, value] of Object.entries(this.defaultBrowsers)) {\n            rv[key] = value.slice();\n        }\n        for (let key of Object.keys(rv)) {\n            if (urlParams.has(key)) {\n                let value = urlParams.get(key);\n                let listValue = value.split(\",\").filter(x => browsers.includes(x));\n                if (!value.length || listValue.length) {\n                    rv[key] = listValue;\n                }\n            }\n        }\n        return rv;\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.state.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.state.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        let paths = Array.from(this.props.paths);\n        if (paths.length > 1) {\n            topAndClause.push({\"or\": paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: paths[0]});\n        }\n\n        for (let term of this.props.queryTerms) {\n            topAndClause.push(term);\n        }\n\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(Array.from(this.props.paths).map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => {\n            result._wptMetadata = this.getWptMetadata(result.test);\n            result._geckoMetadata = this.getGeckoMetadata(result.test);\n        });\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getWptMetadata(test) {\n        let metadata = new Map();\n        if (this.props.wptMetadata[test]) {\n            for (let meta of this.props.wptMetadata[test]) {\n                let metaEntry = {...meta};\n                let product = metaEntry.product;\n                delete metaEntry.product;\n                if (!metadata.has(product)) {\n                    metadata.set(product, []);\n                }\n                metadata.get(product).push(metaEntry);\n            }\n        }\n        return metadata;\n    }\n\n    getGeckoMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    onBrowserChange = (passesIn, failsIn) => {\n        this.setState({passesIn, failsIn});\n        for (let [key, values] of [[\"passesIn\", passesIn],\n                                   [\"failsIn\", failsIn]]) {\n            values = values.sort();\n            if (!arraysEqual(values, this.defaultBrowsers[key])) {\n                urlParams.set(key, values.join(\",\"));\n            } else {\n                urlParams.delete(key);\n            }\n        }\n    }\n\n    render() {\n        let data;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n           data = (<div>\n                      <p>Loading…</p>\n                    </div>);\n        } else if (this.state.results === null) {\n            data = (<div>\n                      <p>Load failed</p>\n                    </div>);\n        } else if (!this.state.results.results.length) {\n            data = (<div>\n                      <p>No results</p>\n                    </div>);\n        } else {\n            let results = this.state.filteredResults ? this.state.filteredResults : [];\n            let testItems = results.map(result => (<TestItem\n                                                     failsIn={this.state.failsIn}\n                                                     passesIn={this.state.passesIn}\n                                                     runs={this.props.runs}\n                                                     result={result}\n                                                     key={result.test}\n                                                     geckoMetadata={result._geckoMetadata || new Map()}\n                                                     wptMetadata={result._wptMetadata}\n                                                     onMetadataChange={this.props.onMetadataChange}\n                                                     onError={this.props.onError}/>));\n            testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n            data = [(<p key=\"desc\">{results.length} top-level tests with\n                       &nbsp;{results\n                              .map(x => x.legacy_status[0].total)\n                              .reduce((x,y) => x+y, 0)} subtests</p>),\n                    <ul key=\"data\">{testItems}</ul>];\n        }\n        return (<div>\n                  {this.props.children}\n                  <ResultsViewSummary failsIn={this.state.failsIn}\n                                      passesIn={this.state.passesIn}\n                                      onChange={this.onBrowserChange}/>\n                  {data}\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({}, {});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps, prevState);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps, prevState) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.state.failsIn === prevState.failsIn &&\n            this.state.passesIn === prevState.passesIn &&\n            this.props.queryTerms === prevProps.queryTerms) {\n            return;\n        }\n        if (!this.props.paths.size) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass ResultsViewSummary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newPassesIn: this.props.passesIn,\n            newFailsIn: this.props.failsIn,\n        };\n    }\n\n    joinList(items) {\n        if (!items.length) {\n            return \"\";\n        }\n        if (items.length === 1) {\n            return items[0];\n        }\n        let commaSeparated = items.slice(0, items.length - 1).join(\", \");\n        return `${commaSeparated}, and ${items[items.length - 1]}`;\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onSelectChange = (data, type) => {\n        let key;\n        let state = {};\n        if (type === \"passesIn\") {\n            key = \"newPassesIn\";\n        } else if (type === \"failsIn\") {\n            key = \"newFailsIn\";\n        } else {\n            console.error(`Unknown key ${type}`);\n        }\n        state[key] = data;\n        this.setState(state);\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newPassesIn, this.state.newFailsIn);\n        this.setState({editable: false});\n    }\n\n    render() {\n        if (!this.state.editable) {\n            let text;\n            if (this.props.passesIn.length && this.props.failsIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}\nbut not in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            } else if (this.props.passesIn.length) {\n                text = `Tests that pass in ${this.joinList(this.props.passesIn.map(x => capitalize(x)))}`;\n            } else {\n                text = `Tests that don't pass in ${this.joinList(this.props.failsIn.map(x => capitalize(x)))}`;\n            }\n            return (<p>\n                      {text}\n                      &nbsp;\n                      <button onClick={this.onEditClick}>\n                        Edit\n                      </button>\n                    </p>);\n        } else {\n            let passInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.passesIn.includes(x)\n            };});\n            let failInOptions = browsers.map(x => {return {\n                value: x,\n                name: capitalize(x),\n                selected: this.props.failsIn.includes(x)\n            };});\n            return (<p>Tests that\n                      &nbsp;<label>pass in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"passesIn\")}\n                          options={passInOptions}/>\n                      </label>\n                      &nbsp;but\n                      <label>\n                        &nbsp;not in&nbsp;\n                        <SelectMultiple\n                          onChange={(data) => this.onSelectChange(data, \"failsIn\")}\n                          options={failInOptions}/>\n                      </label>\n                      &nbsp;\n                      <button\n                        onClick={this.onUpdateClick}\n                        disabled={this.state.newPassesIn.length === 0 && this.state.newFailsIn.length === 0}>\n                        Update\n                      </button>\n                    </p>);\n        }\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: props.expanded\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li\n                  className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}\n                  id={this.props.rowId}\n                >\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                         rowId={this.props.result.test}\n                         expanded={window.location.hash.slice(1) === this.props.result.test}\n                         rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    wptMetadata={this.props.wptMetadata}\n                    onError={this.props.onError}\n                    onMetadataChange={this.props.onMetadataChange} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           test={this.props.test}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)}\n                                                                           wptMetadata={this.props.wptMetadata}\n                                                                           onMetadataChange={this.props.onMetadataChange} />));\n        return (<div>\n                  <section>\n                    <ul className=\"links\">\n                      <li><a href={`http://wpt.live${this.props.test}`}>View Test</a></li>\n                      <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>All Results</a></li>\n                      <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                      <li>\n                        <WptTestMetadata\n                          test={this.props.test}\n                          subtest={null}\n                          wptMetadata={this.props.wptMetadata}\n                          onChange={this.props.onMetadataChange} />\n                      </li>\n                    </ul>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                    <GeckoMetaSummary test={this.props.test}\n                                      geckoMetadata={this.props.geckoMetadata} />\n                  </section>\n                </div>);\n    }\n}\n\nclass WptTestMetadata extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            testMetadata: [],\n            addLink: false,\n            newLinkValue: null\n        };\n    }\n\n    componentDidMount() {\n        this.filterBugLinks();\n    }\n\n    onInputChange = (value) => {\n        this.setState({newLinkValue: value});\n    }\n\n    onAddLink = () => {\n        let bugUrl = `https://bugzilla.mozilla.org/show_bug.cgi?id=${this.state.newLinkValue}`;\n        this.props.onChange({test: this.props.test,\n                             subtest: this.props.subtest,\n                             change: \"ADD\",\n                             url: bugUrl});\n        let testMetadata = this.state.testMetadata.concat([{url: bugUrl}]);\n        this.setState({addLink: false, newLinkValue: null, testMetadata});\n    }\n\n    onRemoveLink = (url) => {\n        this.props.onChange({test: this.props.test,\n                             subtest: this.props.subtest,\n                             change: \"REMOVE\",\n                             url: url});\n        let testMetadata = this.state.testMetadata.filter(item => item.url !== url);\n        this.setState({testMetadata});\n    }\n\n    render() {\n        let bugLinks;\n        if (this.state.testMetadata.length) {\n            bugLinks = this.state.testMetadata.map(item => {\n                return <MetadataBugLink key={item.url}\n                                        url={item.url}\n                                        onRemove={this.onRemoveLink} />;\n            });\n        } else {\n            bugLinks = <span>None</span>;\n        }\n        let controlElements;\n        if (this.state.addLink) {\n            controlElements = (<div>\n                                 <TextInput\n                                   onChange={this.onInputChange}/>\n                                 <button onClick={this.onAddLink}>Add</button>\n                                 <button onClick={() => this.setState({addLink: false, newLinkValue: null})}>Cancel</button>\n                             </div>);\n        } else {\n            controlElements = <button onClick={() => this.setState({addLink: true})}>+</button>;\n        }\n        return (<div>\n                Gecko Bugs: {bugLinks}\n                  {controlElements}\n                </div>);\n    }\n\n    filterBugLinks() {\n        let fxMetadata = this.props.wptMetadata.get(\"firefox\");\n        if (!fxMetadata) {\n            return;\n        }\n        let testMetadata = [];\n        for (let meta of fxMetadata) {\n            if (!bugLinkRe.exec(meta.url)) {\n                continue;\n            }\n            if (!meta.results) {\n                if (!this.props.subtest) {\n                    testMetadata.push(meta);\n                }\n            } else {\n                let relevantResults = meta.results.filter(result => (!result.subtest && !this.props.subtest) ||\n                                                          (result.subtest === this.props.subtest));\n                if (relevantResults.length) {\n                    testMetadata.push({...meta, results: relevantResults});\n                }\n            }\n        }\n        this.setState({testMetadata});\n    }\n}\n\nclass MetadataBugLink extends Component {\n    render() {\n        return (<span>\n                <MaybeBugLink value={this.props.url} />\n                <button onClick={() => this.props.onRemove(this.props.url)}>-</button>\n                </span>);\n    }\n}\n\nclass GeckoMetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items = [];\n        if (this.props.geckoMetadata) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug},\n                             {name: \"intermittent\", render: value => JSON.stringify(value)}];\n            for (let prop of metaProps) {\n                if (this.props.geckoMetadata.has(prop.name)) {\n                    items.push(<InlineOrTreeMetadata\n                                 key={prop.name}\n                                 title={prop.title ? prop.title : capitalize(prop.name)}\n                                 values={this.props.geckoMetadata.get(prop.name)}\n                                 render={prop.render}/>);\n                }\n            }\n        };\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <WptTestMetadata\n                       test={this.props.test}\n                       subtest={this.props.subtest}\n                       wptMetadata={this.props.wptMetadata}\n                       onChange={this.props.onMetadataChange} />\n                     <GeckoMetaSummary\n                       geckoMetadata={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = {unconditional: new Map(), conditional: new Map()};\n        let intermittent = {unconditional: new Map(), conditional: new Map()};\n        let lsan = {unconditional: new Map(), conditional: new Map()};\n        let crashes = {unconditional: new Map(), conditional: new Map()};\n        let set = (key, data, dest, mapFn) => {\n            let destKey;\n            if (!data || !data.length) {\n                return;\n            }\n            destKey = (data.length === 1 && (data[0] === null || data[0][0] === null)) ? \"unconditional\": \"conditional\";\n            if (mapFn) {\n                data = data.map(mapFn);\n            }\n            dest[destKey].set(key, data);\n        };\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            set(dir, dirData.disabled, disabled);\n            set(dir, dirData['lsan-allowed'], lsan);\n            set(dir, dirData.expected_CRASH, crashes, cond => [cond, null]);\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                set(testKey, testData.disabled, disabled);\n                set(testKey, testData.intermittent, intermittent);\n                set(testKey, testData.expected_CRASH, crashes, cond => [cond, null]);\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    set(subtestKey, subtestData.disabled, disabled);\n                    set(subtestKey, subtestData.intermittent, intermittent);\n                    set(subtestKey, subtestData.expected_CRASH, crashes, cond => [cond, null]);\n                }\n            }\n        }\n        return {disabled, intermittent, lsan, crashes};\n    }\n\n    render() {\n        if (!this.props.data) {\n            return <p>Loading</p>;\n        }\n        let byType = this.groupData();\n        if (byType === null ||\n            !Object.values(byType).some(typeValues => Object.values(typeValues).some(x => x.size > 0))) {\n            return (<section>\n                      <h2>Gecko metadata</h2>\n                      <p>None</p>\n                      </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <GeckoDataSection\n                    key=\"crashes\"\n                    data={byType.crashes}\n                    render={value => null}\n                    title=\"Crashes\"\n                    desc=\"tests crash\" />\n                  <GeckoDataSection\n                    key=\"disabled\"\n                    data={byType.disabled}\n                    render={value => <MaybeBugLink value={value} />}\n                    title=\"Disabled\"\n                    desc=\"tests are disabled\" />\n                  <GeckoDataSection\n                    key=\"intermittent\"\n                    data={byType.intermittent}\n                    render={value => <StatusListValue value={value} />}\n                    title=\"Intermittent\"\n                    desc=\"tests are intermittent\" />\n                  <GeckoDataSection\n                    key=\"lsan\"\n                    data={byType.lsan}\n                    render={value => <LsanListValue value={value} />}\n                    title=\"LSAN Failures\"\n                    desc=\"directories have LSAN failures\"/>\n                </section>);\n    }\n}\n\n\nclass GeckoDataSection extends Component {\n    render() {\n        let {conditional, unconditional} = this.props.data;\n        if (!conditional.size && !unconditional.size) {\n            return null;\n        }\n        let count = 0;\n        let items = [];\n        for (let [type, typeData] of [[\"In all configurations\", unconditional],\n                                      [\"In some configurations\", conditional]]) {\n            if (!typeData.size) {\n                continue;\n            }\n            items.push(<h4 key={type}>{type}</h4>);\n            for (let [test, values] of iterMapSorted(typeData)) {\n                count++;\n                items.push(<GeckoMetadataLine\n                             key={test}\n                             title={test}\n                             values={values}\n                             render={this.props.render}/>);\n            }\n        }\n        return (<section>\n                  <h3>{this.props.title}</h3>\n                  <p>{count} {this.props.desc}</p>\n                  <ul>{items}</ul>\n                </section>);\n    }\n\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\nclass StatusListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let statuses = this.props.value.map(x => <code>{x}</code>)\n                .reduce((prev, current) => prev.length ? prev.concat([\", \", current]) : [current], []);\n            return (<code>{statuses}</code>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}