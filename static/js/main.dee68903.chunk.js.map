{"version":3,"sources":["utils.js","filter.js","form.js","App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","FilterError","Error","handlers","and","data","args","child","push","filterCompiler","operators","apply","or","not","contains","_len","arguments","_key","ctx","x","_len2","_key2","some","arg","Object","ctxValue","getValue","includes","keyParts","split","target","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","part","Map","input","op","hasOwnProperty","concat","Checkbox","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","checked","onCheckboxChange","state","inherits","createClass","react_default","createElement","name","type","onChange","Component","Select","_Component3","_getPrototypeOf2","_this3","selectItems","options","option","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","makeWptFyiUrl","path","params","url","URL","defaults","_ref3","_ref2","slicedToArray","searchParams","append","_arr","_loop","_i2","forEach","FetchError","resp","message","status","statusText","fetchJson","_callee17","_context17","fetch","sent","ok","json","abrupt","anyRe","workerRe","testToPath","test","pathname","match","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","set","_update","delete","makeError","id","App","_this2","onError","error","errors","onDismissError","idx","findIndex","splice","onFilterChange","filter","filterFunc","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","retry","redirect","indexName","artifactName","_callee2","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","runsUrl","aligned","asyncToGenerator","mark","_callee5","_context5","_this4","loadWptRunData","_callee7","_context7","_this5","loadGeckoMetadata","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","Promise","all","pathRe","makeRe","slice","notPaths","values","notPathRe","allMetadata","_arr2","_i3","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i4","filename","relPath","prevProps","prevState","filterGeckoMetadata","body","App_RunInfo","App_BugComponentSelector","App_Filter","App_TestPaths","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","App_ErrorArea","ErrorArea","onDismiss","_this6","_this7","errorLines","_loop2","_ref7","_ref8","App_ErrorLine","className","ErrorLine","_this8","_this$props$error","extraControls","onClick","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","_this9","form_Select","Filter","_this10","types","entries","none","untriaged","triaged","custom","onTypeChange","JSON","stringify","_this10$getType","getType","_this10$getType2","urlValue","_urlValue$split","_urlValue$split2","triageText","optionText","_ref9","_ref10","TestPaths","_this11","add","onUpdateClick","_this12","listItems","form_Checkbox","disabled","ResultsView","_this13","results","filteredResults","query","run_ids","topAndClause","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","browser","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","browser_name","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","orClause","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pattern","searchQuery","buildQuery","method","headers","Content-Type","_context11","_retry","_callee10","_context10","_this14","fetchResults","result","_geckoMetadata","getMetadata","dirParts","testName","dirPath","copyMeta","src","_arr4","_i5","_ref13","_ref12","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr5","_i6","_ref16","_ref15","_this15","_this16","children","testItems","App_TestItem","legacy_status","total","reduce","y","fetchIfPossible","updateFilteredResults","TreeRow","_this17","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this18","loaded","_this19","resultBySubtest","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref21","_ref18","browserResults","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","subtests","subtest","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","resultByBrowser","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","filteredResultBySubtest","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop3","_ref19","_ref20","_iterator11","rv","resultData","browsers","promises","_iterator14","_iteratorNormalCompletion14","_step14","summaryUrl","results_url","parts","promise","then","success","catch","e","resolved","_iterator15","_iteratorNormalCompletion15","_step15","_ref24","_ref23","processResultData","_this20","headerRow","subtestMetadata","resultRows","_ref25","_ref26","App_ResultRow","App_MetaSummary","MetaSummary","items","_this21","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this22","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr6","_i7","_ref29","_ref28","dir","dirData","expected_CRASH","cond","_arr7","_i8","_ref32","_ref31","testData","testKey","_arr8","_i9","_ref35","_ref34","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref38","_ref37","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref41","_ref40","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref44","_ref43","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref47","_ref46","condition","conditionStr","valueList","MaybeBugLink","_arr9","_i10","LsanListValue","frames","Tabs","_this23","handleClickTab","activeTab","_this24","tabItems","App_Tab","active","activeTabContent","Tab","_this25","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dee68903.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    not: data => {\n        return operators.not(filterCompiler(data));\n    },\n\n    contains: (data) => {\n        return operators.contains(data);\n    },\n\n    has: data => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    contains: (arg) => {\n        let key = Object.keys(arg)[0];\n        let value = arg[key];\n        return (ctx) => {\n            let ctxValue = getValue(ctx, key);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(value);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value\n        };\n    }\n\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.setState({value});\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                name={this.props.name}\n                onChange={this.handleChange}\n                value={this.props.value}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {filterCompiler} from './filter';\nimport {Checkbox, TextInput, Select} from './form';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n            filter: null,\n            filterFunc: null,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filter) => {\n        let filterFunc = filter ? filterCompiler(filter) : null;\n        this.setState({filter, filterFunc});\n      }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        this.setState({wptRuns: runs});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let metadata = await this.fetchData(`https://queue.taskcluster.net/v1/task/Ik2tnR1KQzi26GfvTQ2WHw/runs/0/artifacts/public/summary.json`,\n                                            async () => this.loadGeckoMetadata());\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body;\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            body = <p>Loading…</p>;\n        } else {\n            body = [<section id=\"selector\" key=\"selector\">\n                      <RunInfo runs={this.state.wptRuns}/>\n                      <BugComponentSelector onComponentChange={this.onComponentChange}\n                                            components={this.state.bugComponents}\n                                            value={this.state.currentBugComponent} />\n                      <Filter onChange={this.onFilterChange} />\n                      <TestPaths\n                        paths={paths}\n                        selectedPaths={this.state.selectedPaths}\n                        onChange={this.onPathsChange} />\n                    </section>,\n                    <section id=\"details\" key=\"details\">\n                      <Tabs>\n                        <ResultsView label=\"Firefox-only Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[\"safari\", \"chrome\"]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}\n                                     filter={this.state.filterFunc}>\n                          <h2>Firefox-only Failures</h2>\n                          <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                        </ResultsView>\n                        <ResultsView label=\"All Firefox Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}\n                                     filter={this.state.filterFunc}>\n                          <h2>All Firefox Failures</h2>\n                          <p>Tests that fail in Firefox</p>\n                        </ResultsView>\n                        <GeckoData label=\"Gecko Data\"\n                                   data={this.state.pathMetadata}\n                                   paths={Array.from(this.state.selectedPaths)}\n                                   onError={this.onError}>\n                          <h2>Gecko metadata</h2>\n                          <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                          <p>Note: this data is currently not kept up to date</p>\n                        </GeckoData>\n                      </Tabs>\n                    </section>];\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <Select\n                    onChange={this.handleChange}\n                    value={this.props.value}\n                    options={options}/>\n                </section>);\n    }\n}\n\nclass Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: {not: {has: \"_geckoMetadata.bug\"}}},\n                                    triaged: {name: \"Triaged\", filter: {has: \"_geckoMetadata.bug\"}},\n                                    custom: {name: \"Custom…\", filter: null}}));\n\n    constructor(props) {\n        super(props);\n        let [type, data] = this.getType();\n        this.state = {\n            type: type,\n            data: data\n        };\n        props.onChange(data);\n    }\n\n    getType() {\n        // TODO: Maybe this should be in the parent\n        let [type, data] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            [type, data] = urlValue.split(\":\", 1);\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n        }\n        if (type !== \"custom\") {\n            data = this.types.get(type).filter;\n        }\n        return [type, data];\n    }\n\n    onTypeChange = (type) => {\n        this.setState({type: type});\n        let data;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n            data = null;\n        } else if(type === \"custom\") {\n            let data = this.state.data;\n            urlParams.set(\"filter\", `custom:${JSON.stringify(data)}`);\n        } else {\n            urlParams.set(\"filter\", type);\n            data = this.types.get(type).filter;\n        }\n\n        this.props.onChange(data);\n    }\n\n    render() {\n        let triageText = `Triaged status is currently derived from a bug: annotation in\nthe gecko metadata on the test file (not on subtests). In the future this will change to\ninclude external annotations accessible to wpt.fyi`;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": \"UI for custom filters is not yet implemented\"\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return (<section>\n                  <label>Filter:</label>\n                  <Select options={options}\n                          value={this.state.type}\n                          onChange={this.onTypeChange}/>\n                  {optionText.hasOwnProperty(this.state.type) ?\n                   <p className=\"note\">{optionText[this.state.type]}</p> : null}\n                </section>);\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => result._geckoMetadata = this.getMetadata(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    render() {\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let results = this.state.filteredResults ? this.state.filteredResults : [];\n        let testItems = results.map(result => (<TestItem\n                                                 failsIn={this.props.failsIn}\n                                                 passesIn={this.props.passesIn}\n                                                 runs={this.props.runs}\n                                                 result={result}\n                                                 key={result.test}\n                                                 geckoMetadata={result.test._geckoMetadata || new Map()}\n                                                 onError={this.props.onError}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{results.length} top-level tests with\n                    &nbsp;{results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.props.failsIn === prevProps.failsIn &&\n            this.props.passesIn === prevProps.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}