{"version":3,"sources":["utils.js","filter.js","form.js","App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","tokenize","FilterError","Error","handlers","and","data","args","child","push","filterCompiler","operators","apply","or","==","not","_ref","Object","slicedToArray","in","_ref3","_len","arguments","_key","ctx","x","_len2","_key2","some","_ref5","_ref6","arg","_ref7","_ref8","lhs","rhs","ctxValue","getValue","includes","keyParts","split","target","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","part","Map","input","console","error","op","hasOwnProperty","concat","ParseError","space","term","initialLength","m","skip","token","match","slice","abrupt","filter_marked","operatorTokens","Set","unaryOperators","precedenceGroups","operatorPrecedence","filter_step4","filter_iterator4","filter_iteratorNormalCompletion4","filter_ref12","filter_ref10","groupIdx","group","filter_iteratorNormalCompletion6","filter_didIteratorError6","filter_iteratorError6","filter_step6","filter_iterator6","set","operatorAliases","entries","!","defaultOperator","test","Node","name","classCallCheck","obj","children","to_object","UnaryOperatorNode","_this","possibleConstructorReturn","getPrototypeOf","call","operand","BinaryOperatorNode","_this2","ValueNode","createOperatorNode","Parser","operands","tokens","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","top","pop","precedence","operator","_ref11","transformDefaultOperator","parseExpr","expr","parse","Checkbox","_Component","props","handleChange","event","setState","checked","onCheckboxChange","state","inherits","createClass","react_default","createElement","type","onChange","Component","TextInput","_Component2","_getPrototypeOf2","defaultValue","list","Select","_Component3","_getPrototypeOf3","_this3","selectItems","options","option","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","LOADING_STATE","freeze","NONE","LOADING","COMPLETE","makeWptFyiUrl","path","params","url","URL","defaults","_ref2","searchParams","append","_loop","_ref4","forEach","FetchError","resp","message","status","statusText","fetchJson","_callee19","_context19","fetch","sent","ok","json","anyRe","workerRe","testToPath","pathname","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","_update","delete","makeError","id","App","onError","errors","onDismissError","idx","findIndex","splice","onFilterChange","filterFunc","onRunChange","runSha","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","filter","retry","redirect","indexName","artifactName","_callee2","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","aligned","runsUrl","asyncToGenerator","mark","_callee5","_context5","_this4","loadWptRunData","full_revision_hash","_callee7","_context7","_this5","loadGeckoMetadata","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","Promise","all","pathRe","makeRe","notPaths","values","notPathRe","allMetadata","_arr","_i2","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","_stack$pop2","basePath","found","_arr2","_i3","filename","relPath","prevProps","prevState","filterGeckoMetadata","body","App_RunInfo","App_BugComponentSelector","App_Filter","App_TestPaths","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","App_ErrorArea","ErrorArea","onDismiss","_this6","_this7","errorLines","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop2","_ref9","_ref10","App_ErrorLine","_iterator4","className","ErrorLine","_this8","_this$props$error","extraControls","onClick","RunInfo","_this9","onInputChange","newSha","onEditClick","editable","onUpdateClick","runShas","max-count","browserRuns","revision","add","browser_name","_iterator6","_iteratorNormalCompletion6","_step6","sha","form_TextInput","BugComponentSelector","_this10","form_Select","Filter","_this11","types","none","untriaged","triaged","custom","onTypeChange","onExprChange","ast","clearTimeout","timer","e","setTimeout","log","_this11$getType","getType","_this11$getType2","afterFilterUpdate","urlValue","parts","triageText","optionText","_ref12","TestPaths","_this12","_this13","listItems","form_Checkbox","disabled","ResultsView","_this14","results","filteredResults","query","run_ids","topAndClause","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","browser","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","orClause","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","pattern","searchQuery","buildQuery","method","JSON","stringify","headers","Content-Type","_context13","_retry","_callee12","_context12","_this15","fetchResults","result","_geckoMetadata","getMetadata","dirParts","testName","dirPath","copyMeta","src","_arr3","_i4","_ref15","_ref14","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr4","_i5","_ref18","_ref17","_this16","_this17","testItems","App_TestItem","legacy_status","total","reduce","y","fetchIfPossible","updateFilteredResults","TreeRow","_this18","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this19","loaded","_this20","resultBySubtest","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_ref23","_ref20","browserResults","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","subtests","subtest","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","resultByBrowser","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","filteredResultBySubtest","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_loop3","_ref21","_ref22","_iterator14","rv","resultData","browsers","promises","_iterator17","_iteratorNormalCompletion17","_step17","summaryUrl","results_url","promise","then","success","catch","resolved","_iterator18","_iteratorNormalCompletion18","_step18","_ref26","_ref25","processResultData","_this21","headerRow","subtestMetadata","resultRows","_ref27","_ref28","App_ResultRow","App_MetaSummary","MetaSummary","items","_this22","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this23","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr5","_i6","_ref31","_ref30","dir","dirData","expected_CRASH","cond","_arr6","_i7","_ref34","_ref33","testData","testKey","_arr7","_i8","_ref37","_ref36","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref40","_ref39","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_ref43","_ref42","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_ref46","_ref45","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_ref49","_ref48","condition","conditionStr","valueList","MaybeBugLink","_arr8","_i9","LsanListValue","frames","Tabs","_this24","handleClickTab","activeTab","_this25","tabItems","App_Tab","active","activeTabContent","Tab","_this26","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f385ade6.chunk.js","sourcesContent":["export function* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nexport function arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nexport function setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nexport function *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n","class FilterError extends Error {};\n\nlet handlers = {\n    and: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'and' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.and(...args);\n    },\n\n    or: (data) => {\n        if (!Array.isArray(data)) {\n            throw new FilterError(\"Argument to 'or' clause must be an array\");\n        }\n        let args = [];\n        for (let child of data) {\n            args.push(filterCompiler(child));\n        }\n        return operators.or(...args);\n    },\n\n    \"==\": (data)  => {\n        return operators[\"==\"](data);\n    },\n\n    not: ([data]) => {\n        return operators.not(filterCompiler(data));\n    },\n\n    in: (data) => {\n        return operators.in(data);\n    },\n\n    has: ([data]) => {\n        if (typeof data !== \"string\") {\n            throw new FilterError(\"Argument to 'has' clause must be a string\");\n        }\n        return operators.has(data);\n    }\n};\n\nlet operators = {\n    and: (...args) => {\n        return (ctx) => {\n            return args.every(x => x(ctx));\n        };\n    },\n\n    or: (...args) => {\n        return (ctx) => args.some(x => x(ctx));\n    },\n\n    \"==\": ([lhs, rhs]) => {\n        return lhs === rhs;\n    },\n\n    not: (arg) => {\n        return (ctx) => !arg(ctx);\n    },\n\n    in: ([lhs, rhs]) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, rhs);\n            if (typeof ctxValue !== \"string\") {\n                throw new FilterError();\n            }\n            return ctxValue.includes(lhs);\n        };\n    },\n\n    has: (arg) => {\n        return (ctx) => {\n            let ctxValue = getValue(ctx, arg);\n            return ctxValue !== undefined;\n        };\n    }\n};\n\nfunction getValue(ctx, key) {\n    let keyParts = key.split(\".\");\n    let target = ctx;\n    for (let part of keyParts) {\n        if (target instanceof Map) {\n            target = target.get(part);\n        } else {\n            target = target[part];\n        }\n        if (target === undefined) {\n            return undefined;\n        }\n    }\n    return target;\n}\n\nexport function filterCompiler(input) {\n    let keys = Object.keys(input);\n    if (keys.length !== 1) {\n        console.error(input);\n        throw new FilterError(\"Can't handle an input with multiple keys\");\n    }\n    let op = keys[0];\n    if (!handlers.hasOwnProperty(op)) {\n        console.error(input);\n        throw new FilterError(`Unknown operator ${op}`);\n    }\n    return handlers[op](input[op]);\n}\n\nclass ParseError extends Error{};\n\nfunction* tokenize(input) {\n    let space = /\\s*/;\n    let term = /\\w(?:\\w|\\d|\\.|_|\\-|\\+)*|\\d+|==|!=|\\(|\\)|:|\".*?[^\\\\]\"|'.*?[^\\\\]'/;\n\n    let initialLength = input.length;\n\n    while (input.length) {\n        // Skip spaces\n        let m = input.match(space);\n        if (m[0].length) {\n            let skip = m[0].length;\n            input = input.slice(skip);\n            if (!input.length) {\n                break;\n            }\n        }\n\n        //Match the next token\n        m = input.match(term);\n        if (!m) {\n            throw new ParseError(`Invalid input at character ${initialLength - input.length}`);\n        }\n        let token = m[0];\n        yield token;\n        input = input.slice(token.length);\n    }\n}\n\nconst operatorTokens = new Set([\"==\", \"!=\", \"in\", \"and\", \"or\", \"!\", \"not\", \":\", \"has\"]);\nconst unaryOperators = new Set([\"!\", \"not\", \"has\"]);\n\nconst precedenceGroups = [[\":\"], [\"in\", \"==\", \"!=\", \"has\"], [\"not\", \"!\"], [\"and\"], [\"or\"]];\nconst operatorPrecedence = new Map();\n\nfor (let [groupIdx, group] of precedenceGroups.map((x, i) => [i, x])) {\n    for (let op of group) {\n        operatorPrecedence.set(op, precedenceGroups.length - groupIdx);\n    }\n}\n\nconst operatorAliases = new Map(Object.entries({\"!\": \"not\"}));\n\nconst defaultOperator = new Map(Object.entries({test: \"in\"}));\n\n\nclass Node {\n    constructor(name) {\n        this.name = name;\n    }\n\n    to_object() {\n        let obj = {};\n        obj[this.name] = this.children().map(x => x.to_object());\n        return obj;\n    }\n}\n\nclass UnaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || !unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.operand = null;\n    }\n\n    children() {\n        return [this.operand];\n    }\n}\n\nclass BinaryOperatorNode extends Node {\n    constructor(name) {\n        if (!operatorTokens.has(name) || unaryOperators.has(name)) {\n            throw new Error();\n        }\n        if (operatorAliases.has(name)) {\n            name = operatorAliases.get(name);\n        }\n\n        super(name);\n        this.lhs = null;\n        this.rhs = null;\n    }\n\n    children() {\n        return [this.lhs, this.rhs];\n    }\n}\n\nclass ValueNode extends Node {\n    constructor(name) {\n        if (name[0] === \"'\" || name[0] === '\"') {\n            name = name.slice(1, name.length - 1);\n        }\n        super(name);\n    }\n    to_object() {\n        return this.name;\n    }\n}\n\nfunction createOperatorNode(token) {\n    if (unaryOperators.has(token)) {\n        return new UnaryOperatorNode(token);\n    }\n    return new BinaryOperatorNode(token);\n}\n\nfunction transformDefaultOperator(operator) {\n    // The default operator creates a different kind of relation depending on the arguments\n    let op = \"==\";\n    if (defaultOperator.has(operator.lhs.name)) {\n        op = defaultOperator.get(operator.lhs.name);\n    }\n    operator.name = op;\n    if (op === \"in\") {\n        [operator.lhs, operator.rhs] = [operator.rhs, operator.lhs];\n    }\n    return operator;\n}\n\nclass Parser {\n    constructor() {\n        this.operators = [];\n        this.operands = [];\n    }\n\n    top() {\n        return this.operators.length ? this.operators[this.operators.length - 1] : null;\n    }\n\n    parse(tokens) {\n        for (let token of tokens) {\n            if (token === \"(\") {\n                this.operators.push(token);\n            } else if (token === \")\") {\n                while(this.top() !== null && this.top() !== \"(\") {\n                    this.apply();\n                }\n                if (!this.operators.length) {\n                    throw new ParseError(\"Mismatched parens\");\n                }\n                this.operators.pop();\n            } else if (operatorTokens.has(token)) {\n                while (this.top() !== null &&\n                       this.top() !== \")\" &&\n                       this.precedence(this.top().name) >= this.precedence(token)) {\n                    this.apply();\n                }\n                this.operators.push(createOperatorNode(token));\n            } else {\n                this.operands.push(new ValueNode(token));\n            }\n        }\n        while (this.operators.length) {\n            this.apply();\n        }\n        if (this.operands.length !== 1) {\n            throw new ParseError(\"Operands remaining at end of input\");\n        }\n        return this.operands[0];\n    }\n\n    precedence(token) {\n        return operatorPrecedence.get(token);\n    }\n\n    apply() {\n        let operator = this.operators.pop();\n        if (unaryOperators.has(operator.name)) {\n            let operand = this.operands.pop();\n            if (!operand) {\n                throw new Error();\n            }\n            operator.operand = operand;\n        } else {\n            let rhs = this.operands.pop();\n            let lhs = this.operands.pop();\n            if (!lhs || !rhs) {\n                throw new Error();\n            }\n            operator.lhs = lhs;\n            operator.rhs = rhs;\n            if (operator.name === \":\") {\n                operator = transformDefaultOperator(operator);\n            }\n        }\n        this.operands.push(operator);\n    }\n}\n\n\nexport function parseExpr(expr) {\n    let parser = new Parser();\n    return parser.parse(tokenize(expr)).to_object();\n}\n","import React, { Component } from 'react';\n\nexport class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nexport class TextInput extends Component {\n    handleChange = (event) => {\n        let value = event.target.value;\n        this.props.onChange(value);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.name}\n                  onChange={this.handleChange}\n                  defaultValue={this.props.defaultValue}\n                  list={this.props.list}/>);\n    }\n}\n\n\nexport class Select extends Component {\n    handleChange = (event) => {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.options.map(option => <option value={option.value} key={option.value}>{option.name}</option>);\n        return (<select\n                  onChange={this.handleChange}\n                  value={this.props.value}>\n                  {selectItems}\n                </select>);\n    }\n}\n\nexport class DataList extends Component {\n    render() {\n        let items = this.props.options.map(option => <option value={option} key={option}/>);\n        return (<datalist id={this.props.id}>\n                  {items}\n                </datalist>);\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {arraysEqual, setsEqual, reversed, iterMapSorted, enumerate} from './utils';\nimport {filterCompiler, parseExpr} from './filter';\nimport {Checkbox, TextInput, Select} from './form';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    params = new Map(Object.entries(params));\n    for (let [key, value] of defaults) {\n        if (!params.has(key)) {\n            url.searchParams.append(key, value);\n        }\n    }\n    for (let [key, value] of params) {\n        if (value === null || value === undefined) {\n            continue;\n        }\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            runSha: null,\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n            filter: null,\n            filterFunc: null,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    onFilterChange = (filterFunc) => {\n        this.setState({filterFunc});\n    }\n\n    onRunChange = (runSha) => {\n        this.setState({runSha});\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let params = {aligned: \"\"};\n        if (this.state.runSha) {\n            params[\"sha\"] = this.state.runSha;\n        }\n        let runsUrl = makeWptFyiUrl(\"api/runs\", params);\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        let runSha = runs[0].full_revision_hash;\n        this.setState({wptRuns: runs, runSha});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let metadata = await this.fetchData(`https://queue.taskcluster.net/v1/task/YtpxIfHTR5CKgd4EfpkAQg/runs/0/artifacts/public/summary.json`,\n                                            async () => this.loadGeckoMetadata());\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n        if (prevState.runSha !== this.state.runSha) {\n            this.setState({loading_state: LOADING_STATE.LOADING});\n            await this.loadWptRunData();\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body = [];\n        if (this.state.runSha) {\n            body.push(<section id=\"selector\" key=\"selector\">\n                        <RunInfo runSha={this.state.runSha}\n                                   onChange={this.onRunChange} />\n                        <BugComponentSelector onComponentChange={this.onComponentChange}\n                                              components={this.state.bugComponents}\n                                              value={this.state.currentBugComponent} />\n                          <Filter onChange={this.onFilterChange} />\n                          <TestPaths\n                            paths={paths}\n                            selectedPaths={this.state.selectedPaths}\n                            onChange={this.onPathsChange} />\n                        </section>);\n        }\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            body.push(<section id=\"details\" key=\"details\">\n                        <p>Loading…</p>\n                      </section>);\n        } else {\n            body.push(\n                <section id=\"details\" key=\"details\">\n                  <Tabs>\n                    <ResultsView label=\"Firefox-only Failures\"\n                                 failsIn={[\"firefox\"]}\n                                 passesIn={[\"safari\", \"chrome\"]}\n                                 runs={this.state.wptRuns}\n                                 paths={Array.from(this.state.selectedPaths)}\n                                 geckoMetadata={this.state.pathMetadata}\n                                 onError={this.onError}\n                                 filter={this.state.filterFunc}>\n                      <h2>Firefox-only Failures</h2>\n                      <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                    </ResultsView>\n                    <ResultsView label=\"All Firefox Failures\"\n                                 failsIn={[\"firefox\"]}\n                                 passesIn={[]}\n                                 runs={this.state.wptRuns}\n                                 paths={Array.from(this.state.selectedPaths)}\n                                 geckoMetadata={this.state.pathMetadata}\n                                 onError={this.onError}\n                                 filter={this.state.filterFunc}>\n                      <h2>All Firefox Failures</h2>\n                      <p>Tests that fail in Firefox</p>\n                    </ResultsView>\n                    <GeckoData label=\"Gecko Data\"\n                               data={this.state.pathMetadata}\n                               paths={Array.from(this.state.selectedPaths)}\n                               onError={this.onError}>\n                      <h2>Gecko metadata</h2>\n                      <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                      <p>Note: this data is currently not kept up to date</p>\n                    </GeckoData>\n                  </Tabs>\n                </section>);\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editable: false,\n            newSha: null,\n            runShas: []\n        };\n    }\n\n    onInputChange = (value) => {\n        this.setState({newSha: value});\n    }\n\n    onEditClick = () => {\n        this.setState({editable: true});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.newSha);\n        this.setState({editable: false});\n    }\n\n    async componentDidMount() {\n        let url = makeWptFyiUrl(\"/api/runs\", {\"max-count\": \"100\"});\n        let runs = await fetchJson(url);\n        let browserRuns = new Map();\n        for (let run of runs) {\n            if (!browserRuns.has(run.revision)) {\n                browserRuns.set(run.revision, new Set());\n            }\n            browserRuns.get(run.revision).add(run.browser_name);\n        }\n        let runShas = [];\n        for (let run of runs) {\n            if (browserRuns.has(run.revision) && browserRuns.get(run.revision).size === 3) {\n                runShas.push(run.revision);\n            }\n            browserRuns.delete(run.revision);\n        }\n        this.setState({runShas});\n    }\n\n    render() {\n        if (!this.props.runSha && !this.state.editable) {\n            return null;\n        }\n        let url = makeWptFyiUrl(\"\", {sha: this.props.runSha});\n        return (<dl>\n                  <dt>wpt SHA1:</dt>\n                  {this.state.editable ?\n                   (<dd>\n                      {this.state.runShas ?\n                       (<datalist id=\"runShasData\">\n                          {this.state.runShas.map(x => <option key={x} value={x}/>)}\n                        </datalist>) : null}\n                      <TextInput defaultValue={this.props.runSha}\n                                 onChange={this.onInputChange}\n                                 list=\"runShasData\"/>\n                       <button onClick={this.onUpdateClick}>\n                         Update\n                       </button>\n                    </dd>):\n                    (<dd>\n                       <a href={url}>{this.props.runSha.slice(0,12)}</a>\n                       <button onClick={this.onEditClick}>\n                         Edit\n                       </button>\n                     </dd>)}\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (value) => {\n        this.props.onComponentChange(value);\n    }\n\n    render() {\n        let options = this.props.components.map(component => {\n            return {value:component.toLowerCase(), name:component};\n        });\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <Select\n                    onChange={this.handleChange}\n                    value={this.props.value}\n                    options={options}/>\n                </section>);\n    }\n}\n\nclass Filter extends Component {\n    types = new Map(Object.entries({none: {name: \"None\", filter: null},\n                                    untriaged: {name: \"Untriaged\", filter: \"not has _geckoMetadata.bug\"},\n                                    triaged: {name: \"Triaged\", filter: \"has _geckoMetadata.bug\"},\n                                    custom: {name: \"Custom…\", filter: null}}));\n\n    constructor(props) {\n        super(props);\n        let [type, expr] = this.getType();\n        this.state = {type, expr};\n        this.afterFilterUpdate();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.type !== this.state.type ||\n            prevState.expr !== this.state.expr) {\n            this.afterFilterUpdate();\n        }\n    }\n\n    getType() {\n        // TODO: Maybe this should be in the parent\n        let [type, expr] = [\"none\", null];\n        let urlValue = urlParams.get(\"filter\");\n        if (urlValue) {\n            let parts = urlValue.split(\":\");\n            type = parts[0];\n            expr = parts.slice(1).join(\":\");\n        }\n        if (!this.types.has(type)) {\n            type = \"none\";\n            expr = null;\n        }\n        if (type !== \"custom\") {\n            expr = this.types.get(type).filter;\n        }\n        return [type, expr];\n    }\n\n    onTypeChange = (type) => {\n        if (!this.types.has(type)) {\n            return;\n        }\n        this.setState({type: type});\n        let expr;\n        if (type === \"custom\") {\n            expr = this.state.expr;\n        } else {\n            expr = this.types.get(type).filter;\n        }\n        if (expr) {\n            this.props.onChange(filterCompiler(parseExpr(expr)));\n        }\n    }\n\n    onExprChange = (expr) => {\n        let ast;\n        clearTimeout(this.timer);\n        try {\n            ast = expr ? parseExpr(expr) : null;\n        } catch (e) {\n            this.timer = setTimeout(() => {\n                //TODO: Add UI errors for things that won't compile\n                console.log(e);\n            }, 1000);\n            return;\n        }\n        this.timer = setTimeout(() => {\n            let filter;\n            try {\n                filter = ast ? filterCompiler(ast) : null;\n            } catch(e) {\n                console.error(e);\n                return;\n            }\n            this.props.onChange(filter);\n            this.setState({expr});\n        }, 1000);\n    }\n\n    afterFilterUpdate() {\n        let type = this.state.type;\n        if (type === \"none\") {\n            urlParams.delete(\"filter\");\n        } else if(type === \"custom\") {\n            let expr = this.state.expr;\n            urlParams.set(\"filter\", `custom:${expr}`);\n        } else {\n            urlParams.set(\"filter\", type);\n        }\n    }\n\n    render() {\n        let triageText = <p className=\"note\">\n                           Triaged status is currently derived from a bug: annotation in\nthe gecko metadata on the test file (not on subtests). In the future this will change to\ninclude external annotations accessible to wpt.fyi.\n                         </p>;\n        let optionText = {\n            \"triaged\": triageText,\n            \"untriaged\": triageText,\n            \"custom\": (<div className=\"note\">\n                         <p>\n                           Custom filters are boolean expressions with logical operators\n                           &nbsp;<code>and</code>, <code>or</code>, and <code>not</code>`,\n                           equality operators <code>{\"==\"}</code>, and <code>!=</code>\n                           and custom operators <code>in</code> for text substrings\n                           and <code>has</code> for testing if a field exists.\n                         </p>\n                         <p>\n                           Available fields are <code>test</code> for the test title and\n                           <code>_geckoMetadata</code> for fields set from gecko metadata\n                           Gecko metadata fields include <code>bug</code> and\n                           <code>lsan-allowed</code>\n                         </p>\n                         <p>\n                           The <code>:</code> operator performs a default operation depending\n                           on the selected field</p>\n                         <p>\n                           Examples:\n                         </p>\n                         <ul>\n                           <li><code>historical in test</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>test:historical</code> - The test name contains\n                             the substring \"historical\"</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                           <li><code>not has _geckoMetadata.bug</code> - Gecko metadata doesn't\n                             specify a bug field for the test</li>\n                         </ul>\n                        </div>)\n        };\n        let options = Array.from(this.types).map(([value, {name}]) => ({value, name}));\n        return (<section>\n                  <label>Filter:</label>\n                  <Select options={options}\n                          value={this.state.type}\n                          onChange={this.onTypeChange}/>\n                  {this.state.type === \"custom\" ? <TextInput onChange={this.onExprChange}\n                                                             defaultValue={this.state.expr}/> : null}\n                  {optionText.hasOwnProperty(this.state.type) ?\n                   optionText[this.state.type] : null}\n                </section>);\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n            filter: null,\n            filteredResults: null\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        // TODO: should be able to do this more efficiently\n        results.results.forEach(result => result._geckoMetadata = this.getMetadata(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    updateFilteredResults() {\n        let filteredResults;\n        if (!this.state.results) {\n            filteredResults = this.state.results;\n        } else if (!this.props.filter) {\n            filteredResults = this.state.results.results;\n        } else {\n            filteredResults = this.state.results.results.filter(x => this.props.filter(x));\n        }\n        this.setState({filteredResults});\n    }\n\n    render() {\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let results = this.state.filteredResults ? this.state.filteredResults : [];\n        let testItems = results.map(result => (<TestItem\n                                                 failsIn={this.props.failsIn}\n                                                 passesIn={this.props.passesIn}\n                                                 runs={this.props.runs}\n                                                 result={result}\n                                                 key={result.test}\n                                                 geckoMetadata={result.test._geckoMetadata || new Map()}\n                                                 onError={this.props.onError}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{results.length} top-level tests with\n                    &nbsp;{results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n        await this.fetchIfPossible(prevProps);\n        if (prevState.filter !== this.state.filter) {\n            this.updateFilteredResults();\n        }\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.props.failsIn === prevProps.failsIn &&\n            this.props.passesIn === prevProps.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n        this.updateFilteredResults();\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}